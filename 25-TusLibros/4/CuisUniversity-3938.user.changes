

----STARTUP---- (7 November 2019 19:10:50) as /home/dhuaier/Desktop/linux64/CuisUniversity-3938.image!


----End fileIn of /home/dhuaier/Desktop/linux64/TusLibros-33.st----!

----SNAPSHOT----(7 November 2019 19:11:31) CuisUniversity-3938.image priorSource: 14319118!

TestCase subclass: #InterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: #TusLibros stamp: 'DH 11/7/2019 19:12:23'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/7/2019 19:28:21'!
Object subclass: #Interface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 19:27:55'!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ self createInterface.
	self should: [interface createCartWithClientID: self invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidIDErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 19:28:38'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 19:28:38'!
ERROR!

TestCase subclass: #InterfaceTest
	instanceVariableNames: 'storeTestObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: #TusLibros stamp: 'DH 11/7/2019 19:30:42'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'storeTestObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'nil' stamp: 'DH 11/7/2019 19:31:12'!
setUp

	storeTestObjectFactory := StoreTestObjectsFactory new.
	! !

TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: #TusLibros stamp: 'DH 11/7/2019 19:31:39'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 19:31:50' prior: 50777965!
setUp

	testObjectFactory := StoreTestObjectsFactory new.
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 19:32:45' prior: 50777931!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ testObjectFactory createInterface.
	self should: [interface createCartWithClientID: self invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidIDErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 19:33:08' prior: 50777988!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ testObjectFactory createInterface.
	self should: [interface createCartWithClientID: testObjectFactory invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidIDErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'DH 11/7/2019 19:34:02'!
createInterface
	
	^ Interface new! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'DH 11/7/2019 19:34:49'!
invalidClientID
	
	^ 42! !
!Interface class methodsFor: 'nil' stamp: 'DH 11/7/2019 19:35:23'!
invalidIDErrorMessage

	^ 'Invalid client ID.'! !
!Interface methodsFor: 'nil' stamp: 'DH 11/7/2019 19:36:30'!
createCartWithClientID: aClientID andPassword: aPassword

	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 19:37:06' prior: 50778032!
createCartWithClientID: aClientID andPassword: aPassword

	self error: self class invalidIDErrorMessage.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 19:37:13'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 19:38:23'!
test02CannotCreateCartWithIncorrectPassword

	|interface|
	interface _ testObjectFactory createInterface.
	self should: [interface createCartWithClientID: testObjectFactory validClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface incorrectPasswordErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !
!Interface class methodsFor: 'errorMessages' stamp: 'DH 11/7/2019 19:38:47'!
incorrectPasswordErrorMessage

	^ 'Incorrect password.'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 19:39:11'!
validClientID
	
	^ 123456! !

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 19:39:21'!
FAILURE!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 19:39:21'!
FAILURE!

Object subclass: #Interface
	instanceVariableNames: 'clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/7/2019 19:40:08'!
Object subclass: #Interface
	instanceVariableNames: 'clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'nil' stamp: 'DH 11/7/2019 19:41:37'!
initializeWith: aClientDictionary

	clients _ aClientDictionary.! !
!Interface class methodsFor: 'nil' stamp: 'DH 11/7/2019 19:42:19'!
newWith: aClientDictionary

	^ self new initializeWith: aClientDictionary.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 19:45:55' prior: 50778021!
createInterface

	|clients|
	
	clients _ Dictionary new.
	clients at: self validClientID put: 'flan'.  
		
	^ Interface newWith: clients.! !

----End fileIn of /home/dhuaier/Desktop/linux64/Packages/TerseGuide.pck.st----!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 19:48:12' prior: 50778037!
createCartWithClientID: aClientID andPassword: aPassword

	(clients includesKey: aClientID) ifTrue: [self error: self class incorrectPasswordErrorMessage.].
	self error: self class invalidIDErrorMessage.! !

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 19:48:22'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 19:48:22'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 19:48:22'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 19:53:23'!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2|
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	interface _ testObjectFactory createInterface.
	interface createCartWithClientID: clientID1 andPassword: (testObjectFactory clients at: clientID1)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 19:55:12'!
clients

	|clients|
	clients _ Dictionary new.
	clients at: self validClientID put: 'flan'.
	clients at: self anotherValidClientID put: 'rosebud'.
	^clients! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 19:55:51'!
anotherValidClientID

	^8128! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 19:56:16' prior: 50778100!
createInterface
		
	^ Interface newWith: self clients.! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 19:57:25' prior: 50781137!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2 cartID1 cartID2|
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	interface _ testObjectFactory createInterface.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory clients at: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory clients at: clientID2)
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 19:58:30' prior: 50781168!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2 cartID1 cartID2|
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	interface _ testObjectFactory createInterface.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory clients at: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory clients at: clientID2).
	
	self deny: cartID1 = cartID2.
	! !

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/7/2019 19:58:41'!
ERROR!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/7/2019 20:02:23'!
Object subclass: #Interface
	instanceVariableNames: 'clients nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:02:20' prior: 50781118!
createCartWithClientID: aClientID andPassword: aPassword

	(clients includesKey: aClientID) ifTrue: [self error: self class incorrectPasswordErrorMessage.].
	((clients at: aClientID) = aPassword) ifFalse: [self error: self class invalidIDErrorMessage.].
	
	nextCartID _ nextCartID +1.
	^ nextCartID! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:02:41' prior: 50778089!
initializeWith: aClientDictionary

	clients _ aClientDictionary.
	nextCartID _ 0.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:03:04' prior: 50781215!
createCartWithClientID: aClientID andPassword: aPassword

	(clients includesKey: aClientID) ifTrue: [self error: self class incorrectPasswordErrorMessage.].
	((clients at: aClientID) = aPassword) ifFalse: [self error: self class invalidIDErrorMessage.].
	
	nextCartID _ nextCartID + 1.
	^ nextCartID! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 20:03:19'!
FAILURE!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 20:03:19'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/7/2019 20:03:19'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 20:03:36'!
FAILURE!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 20:03:36'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:05:08' prior: 50781234!
createCartWithClientID: aClientID andPassword: aPassword

	(clients includesKey: aClientID) ifFalse: [self error: self class invalidIDErrorMessage.].
	((clients at: aClientID) = aPassword) ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	nextCartID _ nextCartID + 1.
	^ nextCartID! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 20:05:12'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 20:05:12'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/7/2019 20:05:12'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:14:31'!
test04CannotAddBookToNonExistentCart

	|interface clientID1 clientID2 cartID1 cartID2|
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	interface _ testObjectFactory createInterface.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory clients at: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory clients at: clientID2).
	
	self deny: cartID1 = cartID2.
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:22:49' prior: 50781286!
test04CannotAddBookToNonExistentCart

	|interface book invalidCart|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	invalidCart _ 95173.
	
	self should: [interface add: book to: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!Interface class methodsFor: 'errorMessages' stamp: 'DH 11/7/2019 20:23:19'!
invalidCartIDErrorMessage

	^ 'Cart ID does not exist.'! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 20:23:29'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 20:23:29'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/7/2019 20:23:29'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 20:23:29'!
ERROR!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 20:23:29'!
ERROR!
!Interface methodsFor: 'nil' stamp: 'DH 11/7/2019 20:24:46'!
add: aBookISBN to: aCartID

	self error: self class invalidCartIDErrorMessage.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 20:25:06'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 20:25:06'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/7/2019 20:25:06'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 20:25:06'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:28:38'!
test05CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!Interface class methodsFor: 'errorMessages' stamp: 'DH 11/7/2019 20:29:02'!
bookNotFromEditorialErrorMessage

	^ 'Book does not belong to editorial.'! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:38:56' prior: 50781364!
test05CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	
	
	
	"
	CannotAddBookToNonExistentCart
	CannotListANonExistentCart
	ListingAnEmptyCartResultsInEmptyList
	CannotAddBookThatDoesNotBelongToEditorial
	CannotAddBookWithQuantityLessThanOne
	ListingACartShowsAddedBooks
	"
	
	! !

!testRun: #InterfaceTest #test05CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/7/2019 20:39:06'!
FAILURE!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:41:31'!
test07CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	
	
	
	"
	CannotAddBookToNonExistentCart
	CannotListANonExistentCart
	ListingAnEmptyCartResultsInEmptyList
	CannotAddBookThatDoesNotBelongToEditorial
	CannotAddBookWithQuantityLessThanOne
	ListingACartShowsAddedBooks
	"
	
	! !

!methodRemoval: InterfaceTest #test05CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/7/2019 20:41:31'!
test05CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	
	
	
	"
	CannotAddBookToNonExistentCart
	CannotListANonExistentCart
	ListingAnEmptyCartResultsInEmptyList
	CannotAddBookThatDoesNotBelongToEditorial
	CannotAddBookWithQuantityLessThanOne
	ListingACartShowsAddedBooks
	"
	
	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:41:52'!
test05CannotAddBookToNonExistentCart

	|interface book invalidCart|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	invalidCart _ 95173.
	
	self should: [interface add: book to: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:42:13'!
test05CannotListANonExistentCart

	|interface book invalidCart|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	invalidCart _ 95173.
	
	self should: [interface add: book to: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:42:55' prior: 50781503!
test05CannotListANonExistentCart

	|interface invalidCart|
	
	interface _ testObjectFactory createInterface.
	invalidCart _ 95173.
	
	self should: [interface add: 2 to: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !

!methodRemoval: InterfaceTest #test05CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 20:43:07'!
test05CannotAddBookToNonExistentCart

	|interface book invalidCart|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	invalidCart _ 95173.
	
	self should: [interface add: book to: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 20:43:13'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:43:58' prior: 50781522!
test05CannotListANonExistentCart

	|interface invalidCart|
	
	interface _ testObjectFactory createInterface.
	invalidCart _ 95173.
	
	self should: [interface list: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	! !

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/7/2019 20:44:00'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:44:37'!
list: aCartID

	self error: self invalidCartIDErrorMessage.! !

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/7/2019 20:44:41'!
ERROR!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/7/2019 20:44:41'!
ERROR!
!Interface class methodsFor: 'errorMessages' stamp: 'DH 11/7/2019 20:45:05' prior: 50778028!
invalidIDErrorMessage

	^ 'Invalid client ID.'! !
!Interface class methodsFor: 'errorMessages' stamp: 'DH 11/7/2019 20:45:47'!
invalidClientIDErrorMessage

	^ 'Invalid client ID.'! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:45:47' prior: 50781264!
createCartWithClientID: aClientID andPassword: aPassword

	(clients includesKey: aClientID) ifFalse: [self error: self class invalidClientIDErrorMessage.].
	((clients at: aClientID) = aPassword) ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	nextCartID _ nextCartID + 1.
	^ nextCartID! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:45:47' prior: 50778004!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ testObjectFactory createInterface.
	self should: [interface createCartWithClientID: testObjectFactory invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidClientIDErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !

!methodRemoval: Interface class #invalidIDErrorMessage stamp: 'DH 11/7/2019 20:45:47'!
invalidIDErrorMessage

	^ 'Invalid client ID.'!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 20:46:01'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 20:46:03'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/7/2019 20:46:05'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 20:46:13'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/7/2019 20:46:19'!
ERROR!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/7/2019 20:46:19'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:46:45' prior: 50781578!
list: aCartID

	self error: self class invalidCartIDErrorMessage.! !

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/7/2019 20:46:49'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:47:27'!
test06ListingAnEmptyCartResultsInEmptyList

	|interface client cart|
	
	interface _ testObjectFactory createInterface.
	cart _ 95173.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:49:11' prior: 50781661!
test06ListingAnEmptyCartResultsInEmptyList

	|interface client cart|
	
	interface _ testObjectFactory createInterface.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self assert: (interface list: cart) isEmpty
	! !

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/7/2019 20:49:16'!
ERROR!

Object subclass: #Interface
	instanceVariableNames: 'clients carts nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/7/2019 20:50:43'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:51:01' prior: 50781228!
initializeWith: aClientDictionary

	clients _ aClientDictionary.
	carts _ OrderedCollection new.
	nextCartID _ 0.! !

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/7/2019 20:52:14'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts nextCartID lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:52:12' prior: 50781599!
createCartWithClientID: aClientID andPassword: aPassword

	(clients includesKey: aClientID) ifFalse: [self error: self class invalidClientIDErrorMessage.].
	((clients at: aClientID) = aPassword) ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	lastCartID _ lastCartID + 1.
	carts add: lastCartID.
	^ lastCartID! !

Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/7/2019 20:52:18'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:52:25' prior: 50781703!
initializeWith: aClientDictionary

	clients _ aClientDictionary.
	carts _ OrderedCollection new.
	lastCartID _ 0.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:53:04' prior: 50781653!
list: aCartID

	(carts includes: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	^OrderedCollection new! !

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/7/2019 20:53:11'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:53:57' prior: 50781425!
test07CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	
	
	
	"
	CannotAddBookToNonExistentCart
	CannotListANonExistentCart
	ListingAnEmptyCartResultsInEmptyList
	CannotAddBookThatDoesNotBelongToEditorial
	CannotAddBookWithQuantityLessThanOne
	ListingACartShowsAddedBooks
	"
	
	! !

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/7/2019 20:54:01'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 20:56:14' prior: 50781345!
add: aBookISBN to: aCartID

	(carts includes: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	self error: self class bookNotFromEditorialErrorMessage.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 20:56:19'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 20:56:19'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/7/2019 20:56:19'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 20:56:19'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/7/2019 20:56:19'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/7/2019 20:56:19'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/7/2019 20:56:19'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:58:03'!
test08CannotAddBookWithQuantityLessThanOne

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	
	
	
	"
	CannotAddBookToNonExistentCart
	CannotListANonExistentCart
	ListingAnEmptyCartResultsInEmptyList
	CannotAddBookThatDoesNotBelongToEditorial
	CannotAddBookWithQuantityLessThanOne
	ListingACartShowsAddedBooks
	"
	
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:59:20' prior: 50781830!
test08CannotAddBookWithQuantityLessThanOne

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface CannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	
	
	
	"
	CannotAddBookToNonExistentCart
	CannotListANonExistentCart
	ListingAnEmptyCartResultsInEmptyList
	CannotAddBookThatDoesNotBelongToEditorial
	CannotAddBookWithQuantityLessThanOne
	ListingACartShowsAddedBooks
	"
	
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 20:59:48' prior: 50781862!
test08CannotAddBookWithQuantityLessThanOne

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
	

	! !
!Interface class methodsFor: 'errorMessages' stamp: 'DH 11/7/2019 21:00:10'!
cannotAddLessThanOneBookToCartErrorMessage

	^ 'Cannot add less than one book to cart.'! !

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/7/2019 21:00:23'!
ERROR!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/7/2019 21:00:23'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 21:00:33' prior: 50781762!
test07CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	
	
	
	"
	CannotAddBookToNonExistentCart
	CannotListANonExistentCart
	ListingAnEmptyCartResultsInEmptyList
	CannotAddBookThatDoesNotBelongToEditorial
	CannotAddBookWithQuantityLessThanOne
	ListingACartShowsAddedBooks
	"
	
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/7/2019 21:00:50' prior: 50781305!
test04CannotAddBookToNonExistentCart

	|interface book invalidCart|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	invalidCart _ 95173.
	
	self should: [interface add: 1 of: book to: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 21:01:19'!
add: aNumberOfBooks of: aBookISBN to: aCartID

	(carts includes: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	self error: self class bookNotFromEditorialErrorMessage.! !

!methodRemoval: Interface #add:to: stamp: 'DH 11/7/2019 21:01:27'!
add: aBookISBN to: aCartID

	(carts includes: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	self error: self class bookNotFromEditorialErrorMessage.!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 21:01:39'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/7/2019 21:01:43'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/7/2019 21:01:46'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/7/2019 21:01:55'!
FAILURE!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/7/2019 21:01:55'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/7/2019 21:02:52' prior: 50781980!
add: aNumberOfBooks of: aBookISBN to: aCartID

	aNumberOfBooks < 1 ifTrue: [self error: self class cannotAddLessThanOneBookToCartErrorMessage].
	(carts includes: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	self error: self class bookNotFromEditorialErrorMessage.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/7/2019 21:02:54'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/7/2019 21:02:54'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/7/2019 21:02:54'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/7/2019 21:02:54'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/7/2019 21:02:54'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/7/2019 21:02:54'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/7/2019 21:02:54'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/7/2019 21:02:54'!
PASSED!

----SNAPSHOT----(7 November 2019 21:03:00) CuisUniversity-3938.image priorSource: 14280313!

----QUIT----(7 November 2019 21:03:26) CuisUniversity-3938.image priorSource: 14412870!

----STARTUP---- (11 November 2019 17:40:25) as /home/dhuaier/Desktop/linux64/CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 17:40:29'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 17:40:30'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 17:40:30'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 17:40:30'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 17:40:30'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 17:40:30'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 17:40:30'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 17:46:35'!
test09ListingACartShowsAddedBooks

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
	

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 17:50:17' prior: 50782135!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterface.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory a.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [ | book |interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
	

	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'DH 11/11/2019 17:51:24'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'DH 11/11/2019 17:54:37' prior: 50777880!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 17:55:53' prior: 50782156!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterface.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [ | book |interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
	

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 17:56:32' prior: 50782193!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterface.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	interface add: book1 to: cart.
	
	self should: [ | book |interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
	

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:00:59' prior: 50782217!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterface.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.


	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:04:25' prior: 50782242!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterface.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	self assert: (OrderedCollection with: book1 with: book2) equals: (interface list: cart)


	! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:04:28'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'DH 11/11/2019 18:04:46'!
anotherItemSellByTheStorePrice
	
	^20! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:06:42' prior: 50782014!
add: aNumberOfBooks of: aBookISBN to: aCartID

	aNumberOfBooks < 1 ifTrue: [self error: self class cannotAddLessThanOneBookToCartErrorMessage].
	(carts includes: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	(aBookISBN ) self error: self class bookNotFromEditorialErrorMessage.! !

Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/11/2019 18:07:19'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:08:05'!
initializeWith: aClientDictionary and: aCatalog

	clients _ aClientDictionary.
	carts _ OrderedCollection new.
	lastCartID _ 0.
	catalog _ aCatalog.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:08:22'!
newWith: aClientDictionary and: aCatalog

	^ self new initializeWith: aClientDictionary and: aCatalog! !

!methodRemoval: Interface class #newWith: stamp: 'DH 11/11/2019 18:08:41'!
newWith: aClientDictionary

	^ self new initializeWith: aClientDictionary.!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:09:17' prior: 50781163!
createInterface
		
	^ Interface newWith: self clients and: self defaultCatalog ! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:10:55' prior: 50782287!
add: aNumberOfBooks of: aBookISBN to: aCartID

	aNumberOfBooks < 1 ifTrue: [self error: self class cannotAddLessThanOneBookToCartErrorMessage].
	(carts includes: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	(catalog includesKey: aBookISBN) ifFalse: [self error: self class bookNotFromEditorialErrorMessage.].
	(carts at: aCartID) add: aNumberOfBooks of: aBookISBN.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:12:04' prior: 50781744!
initializeWith: aClientDictionary

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:12:42' prior: 50781718!
createCartWithClientID: aClientID andPassword: aPassword

	(clients includesKey: aClientID) ifFalse: [self error: self class invalidClientIDErrorMessage.].
	((clients at: aClientID) = aPassword) ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: Cart new.
	^ lastCartID! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:13:29' prior: 50782361!
createCartWithClientID: aClientID andPassword: aPassword

	(clients includesKey: aClientID) ifFalse: [self error: self class invalidClientIDErrorMessage.].
	((clients at: aClientID) = aPassword) ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (Cart acceptingItemsOf: catalog).
	^ lastCartID! !

!methodRemoval: Interface #initializeWith: stamp: 'DH 11/11/2019 18:14:02'!
initializeWith: aClientDictionary

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:15:29' prior: 50781751!
list: aCartID

	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	^(carts at: aCartID) copyOfItems.! !
!Cart methodsFor: 'queries' stamp: 'DH 11/11/2019 18:15:50'!
copyOfItems

	^items copy.! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:16:05'!
ERROR!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:16:05'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:17:02' prior: 50782312!
initializeWith: aClientDictionary and: aCatalog

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:17:15'!
ERROR!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:17:15'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:17:37' prior: 50782338!
add: aNumberOfBooks of: aBookISBN to: aCartID

	aNumberOfBooks < 1 ifTrue: [self error: self class cannotAddLessThanOneBookToCartErrorMessage].
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	(catalog includesKey: aBookISBN) ifFalse: [self error: self class bookNotFromEditorialErrorMessage.].
	(carts at: aCartID) add: aNumberOfBooks of: aBookISBN.! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:17:44'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:17:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 18:17:54'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:17:54'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:25:48'!
test10CannotCheckoutANonExistentCart

	|interface cart|
	
	interface _ testObjectFactory createInterface.

	self should: [interface checkout: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
	

	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:26:49'!
invalidCartID
	
	^ -8! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:30:15' prior: 50782553!
test10CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterface.

	self should: [interface checkout: testObjectFactory invalidCartID withCardNumber: 123 withExpirationDate: 123 withOwner: 123]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
		].	
	

	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:32:17'!
validCreditCardNumber
	
	^ '1234567890123456'! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:42:18' prior: 50782572!
test10CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterface.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: 1
		withOwner: 1]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
		].	
	

	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'DH 11/11/2019 18:43:58'!
futureDate

	^Month month: today monthIndex year: today yearNumber + 1! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:44:44' prior: 50782593!
test10CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterface.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
		].	
	

	! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/11/2019 18:45:36'!
validOwner

	^ 'Juan Juan'! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:46:52'!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner! !

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 18:46:58'!
FAILURE!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 18:46:58'!
FAILURE!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:55:28' prior: 50781929!
test07CannotAddBookThatDoesNotBelongToEditorial
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
	
	En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe.
	
	"
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:55:42' prior: 50781894!
test08CannotAddBookWithQuantityLessThanOne
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
"

	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:56:06' prior: 50782428!
add: aNumberOfBooks of: aBookISBN to: aCartID

	"aNumberOfBooks < 1 ifTrue: [self error: self class cannotAddLessThanOneBookToCartErrorMessage]."
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	"(catalog includesKey: aBookISBN) ifFalse: [self error: self class bookNotFromEditorialErrorMessage.]."
	(carts at: aCartID) add: aNumberOfBooks of: aBookISBN.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:56:13'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 18:56:13'!
FAILURE!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 18:56:13'!
FAILURE!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:56:24' prior: 50782614!
test10CannotCheckoutANonExistentCart
"
	|interface|
	
	interface _ testObjectFactory createInterface.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
		].	
	"

	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:56:27'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 18:56:27'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 18:56:42' prior: 50782749!
test10CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterface.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
		].	
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 18:57:43' prior: 50782636!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner

	self error: self class invalidCartIDErrorMessage.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 18:57:47'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 18:57:47'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 19:01:05'!
test11CheckoutWorks

	|interface|
	
	interface _ testObjectFactory createInterface.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
		].	
	
	! !

----SNAPSHOT----(11 November 2019 19:09:10) CuisUniversity-3938.image priorSource: 14412963!

----End fileIn of /home/dhuaier/Desktop/linux64/TusLibros2.st----!

----STARTUP---- (11 November 2019 19:12:09) as /home/dhuaier/Desktop/linux64/CuisUniversity-3938.image!


----End fileIn of /home/dhuaier/Desktop/linux64/TusLibros2.st----!

----STARTUP---- (11 November 2019 19:15:18) as /home/dhuaier/Desktop/linux64/CuisUniversity-3938.image!


----End fileIn of /home/dhuaier/Desktop/linux64/TusLibros2.st----!

Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'DH 11/11/2019 19:17:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'DH 11/11/2019 19:17:58'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'DH 11/11/2019 19:18:25'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!methodRemoval: CreditCard #isExpiredOn: stamp: 'DH 11/11/2019 19:18:33'!
isExpiredOn: aDate 
	
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start !

!methodRemoval: CreditCard class #expiringOn: stamp: 'DH 11/11/2019 19:19:01'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!testRun: #CreditCardTest #test01CreditCardAnswersNumberOwnerAndExpirationDateCorrectly stamp: 'DH 11/11/2019 19:19:13'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardAnswersIfIsExpired stamp: 'DH 11/11/2019 19:19:13'!
PASSED!

!testRun: #CreditCardTest #test03CannotCreateCreditCardWithNumberNotOf16Digits stamp: 'DH 11/11/2019 19:19:13'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/11/2019 19:21:48' prior: 50777894!
expiredCreditCard

	^CreditCard 
	newWithNumber: '1234567890101112' 
	owner: 'Pepe Sanchez' 
	andExpirationDate: (GregorianMonthOfYear year: 2018 month: April)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/11/2019 19:22:13' prior: 50777887!
notExpiredCreditCard

	^CreditCard 
	newWithNumber: '1234567890101112' 
	owner: 'Pepe Sanchez' 
	andExpirationDate: (GregorianMonthOfYear year: 2025 month: April)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/11/2019 19:22:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/11/2019 19:22:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/11/2019 19:22:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/11/2019 19:22:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/11/2019 19:22:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/11/2019 19:22:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/11/2019 19:22:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/11/2019 19:22:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/11/2019 19:22:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/11/2019 19:22:30'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/11/2019 19:22:30'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/11/2019 19:22:30'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/11/2019 19:22:30'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/11/2019 19:22:30'!
ERROR!
!Cashier class methodsFor: 'assertions' stamp: 'DH 11/11/2019 19:23:38' prior: 50777598!
assertIsNotExpired: aCreditCard on: aDate
	
	(aCreditCard expiredOn: aDate) ifTrue: [ self error: self canNotChargeAnExpiredCreditCardErrorMessage ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/11/2019 19:23:54'!
PASSED!

----STARTUP---- (11 November 2019 19:25:06) as /home/dhuaier/Desktop/linux64/CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/11/2019 19:25:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/11/2019 19:25:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/11/2019 19:25:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/11/2019 19:25:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/11/2019 19:25:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/11/2019 19:25:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/11/2019 19:25:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/11/2019 19:25:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/11/2019 19:25:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/11/2019 19:25:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/11/2019 19:25:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/11/2019 19:25:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/11/2019 19:25:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/11/2019 19:25:12'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'DH 11/11/2019 19:26:01'!
newWithNumber: aCreditCardNumber owner: anOwnerName expiringOn: aMonth 
	
	^self new initializeWithNumber: aCreditCardNumber owner: anOwnerName expiringOn: aMonth! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'DH 11/11/2019 19:26:08'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!classDefinition: #CreditCard category: #TusLibros stamp: 'DH 11/11/2019 19:27:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'DH 11/11/2019 19:27:01'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'DH 11/11/2019 19:26:58'!
initializeWithNumber: aCreditCardNumber owner: anOwnerName expiringOn: aMonth

	number _ aCreditCardNumber. 
	owner _ anOwnerName.
	expiration _ aMonth! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'DH 11/11/2019 19:27:05'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard methodsFor: 'initialization' stamp: 'DH 11/11/2019 19:28:44' prior: 50782958!
initializeWithNumber: aCreditCardNumber owner: anOwnerName expiringOn: aMonth

	aCreditCardNumber size = 16 ifFalse: [self error: self class invalidCreditCardNumberErrorMessage.].
	number _ aCreditCardNumber. 
	owner _ anOwnerName.
	expiration _ aMonth! !
!CreditCard class methodsFor: 'error messages' stamp: 'DH 11/11/2019 19:29:19'!
invalidCreditCardNumberErrorMessage

	^'Credit card number does not have 16 digits.'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/11/2019 19:29:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/11/2019 19:29:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/11/2019 19:29:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/11/2019 19:29:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/11/2019 19:29:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/11/2019 19:29:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/11/2019 19:29:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/11/2019 19:29:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/11/2019 19:29:29'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/11/2019 19:29:29'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/11/2019 19:29:29'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/11/2019 19:29:29'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/11/2019 19:29:29'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/11/2019 19:29:29'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/11/2019 19:30:31' prior: 50777894!
expiredCreditCard
	
	^CreditCard
	newWithNumber: '123456789101112'
	owner: 'Pepe Sanchez'
	expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/11/2019 19:31:03' prior: 50777887!
notExpiredCreditCard
	
	^CreditCard
	newWithNumber: '1234567891011120'
	owner: 'Pepe Sanchez'
	expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/11/2019 19:31:08' prior: 50783034!
expiredCreditCard
	
	^CreditCard
	newWithNumber: '1234567891011120'
	owner: 'Pepe Sanchez'
	expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/11/2019 19:31:28' prior: 50783052!
expiredCreditCard
	
	^CreditCard
	newWithNumber: '1234567891011120'
	owner: self validOwner
	expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/11/2019 19:31:35' prior: 50783043!
notExpiredCreditCard
	
	^CreditCard
	newWithNumber: '1234567891011120'
	owner: self validOwner
	expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/11/2019 19:31:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/11/2019 19:31:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/11/2019 19:31:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/11/2019 19:31:41'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/11/2019 19:31:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/11/2019 19:31:41'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/11/2019 19:31:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/11/2019 19:31:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/11/2019 19:31:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/11/2019 19:31:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/11/2019 19:31:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/11/2019 19:31:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/11/2019 19:31:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/11/2019 19:31:44'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 19:31:48'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 19:31:48'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 19:31:57' prior: 50782861!
test11CheckoutWorks

	|interface|
	
	interface _ testObjectFactory createInterface.

	
	
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 19:34:25' prior: 50783160!
test11CheckoutWorks

	|interface cart|
	
	interface _ testObjectFactory createInterface.
	cart _ interface createCartWithClientID: testObjectFactory validClientID andPassword: testObjectFactory 
	
	
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 19:36:47' prior: 50783166!
test11CheckoutWorks

	|interface cart client|
	
	interface _ testObjectFactory createInterface.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	interface checkout: cart withCardNumber: testObjectFactory validCreditCardNumber
	 withExpirationDate:  testObjectFactory  withOwner: 5
	
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 19:38:16' prior: 50783175!
test11CheckoutWorks

	|interface cart client book|
	
	interface _ testObjectFactory createInterface.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart withCardNumber: testObjectFactory validCreditCardNumber
	 withExpirationDate:  testObjectFactory futureDate withOwner: testObjectFactory validOwner.
	
	! !

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 19:38:28'!
ERROR!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 19:38:28'!
ERROR!

Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/11/2019 19:41:12'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface class methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 19:42:03'!
newWith: aClientDictionary salesBook: aSalesBook and: aCatalog

	^ self new initializeWith: aClientDictionary salesBook: aSalesBook and: aCatalog.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 19:42:28'!
initializeWith: aClientDictionary salesBook: aSalesBook and: aCatalog

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.
	salesBook _ aSalesBook.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 19:44:40'!
createInterfaceWith: aSalesBook
		
	^ Interface newWith: self clients salesBook: aSalesBook and: self defaultCatalog ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 19:45:41' prior: 50782332!
createInterface
		
	^ self createInterfaceWith: OrderedCollection new.! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 19:47:27' prior: 50783190!
test11CheckoutWorks

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWith: salesBook .
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart withCardNumber: testObjectFactory validCreditCardNumber
	 withExpirationDate:  testObjectFactory futureDate withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: #algo) equals: salesBook.! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 19:49:28' prior: 50783258!
test11CheckoutWorks

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWith: salesBook .
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart withCardNumber: testObjectFactory validCreditCardNumber
	 withExpirationDate:  testObjectFactory futureDate withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 19:49:43'!
ERROR!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 19:49:43'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 19:52:33' prior: 50782820!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|creditCard|
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth. ! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 19:54:30' prior: 50783311!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|creditCard cashier|
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier  toCheckout: (carts at: aCartID) charging: creditCard throught: 4  on: 5 registeringOn: salesBook.! !

Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/11/2019 19:59:30'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:00:18'!
initializeWith: aClientDictionary salesBook: aSalesBook date: aTodayDate and: aCatalog 

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.
	salesBook _ aSalesBook.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:00:51' prior: 50783353!
initializeWith: aClientDictionary salesBook: aSalesBook date: aTodayDate and: aCatalog 

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.
	salesBook _ aSalesBook.
	today _ aTodayDate.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:01:29' prior: 50782414!
initializeWith: aClientDictionary and: aCatalog

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:02:13'!
newWith: aClientDictionary salesBook: aSalesBook date: aTodayDate and: aCatalog

	^ self new initializeWith: aClientDictionary salesBook: aSalesBook date: aTodayDate and: aCatalog.! !

!methodRemoval: Interface class #newWith:salesBook:and: stamp: 'DH 11/11/2019 20:02:58'!
newWith: aClientDictionary salesBook: aSalesBook and: aCatalog

	^ self new initializeWith: aClientDictionary salesBook: aSalesBook and: aCatalog.!

!methodRemoval: Interface class #newWith:and: stamp: 'DH 11/11/2019 20:03:01'!
newWith: aClientDictionary and: aCatalog

	^ self new initializeWith: aClientDictionary and: aCatalog!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:03:28' prior: 50783245!
createInterfaceWith: aSalesBook
		
	^ Interface newWith: self clients salesBook: aSalesBook date: today and: self defaultCatalog ! !

!methodRemoval: Interface #initializeWith:salesBook:and: stamp: 'DH 11/11/2019 20:03:39'!
initializeWith: aClientDictionary salesBook: aSalesBook and: aCatalog

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.
	salesBook _ aSalesBook.!

!methodRemoval: Interface #initializeWith:and: stamp: 'DH 11/11/2019 20:03:43'!
initializeWith: aClientDictionary and: aCatalog

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:04:08' prior: 50783324!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|creditCard cashier|
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier  toCheckout: (carts at: aCartID) charging: creditCard throught: 4 on: today registeringOn: salesBook.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:06:47' prior: 50783428!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|creditCard cashier|
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier  toCheckout: (carts at: aCartID) charging: creditCard throught: 4 on: today registeringOn: salesBook.! !

TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: #TusLibros stamp: 'DH 11/11/2019 20:08:23'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'setUp/tearDown' stamp: 'DH 11/11/2019 20:08:50' prior: 50777983!
setUp

	testObjectFactory := StoreTestObjectsFactory new.
	debitBehavior := [:anAmount :aCreditCard | ]
	! !
!InterfaceTest methodsFor: 'merchant processor protocol' stamp: 'DH 11/11/2019 20:10:05'!
debit: anAmount from: aCreditCard

	debitBehavior value: anAmount value: aCreditCard ! !
!InterfaceTest methodsFor: 'merchant processor protocol' stamp: 'DH 11/11/2019 20:10:23' prior: 50783481!
debit: anAmount from: aCreditCard

	^debitBehavior value: anAmount value: aCreditCard ! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:39:31'!
newWithClients: aClientDictionary
salesBook: aSalesBook
date: aTodayDate
catalog: aCatalog
andMerchantProcessor: aMerchantProcessor

	^ self new
	initializeWith: aClientDictionary
	salesBook: aSalesBook
	date: aTodayDate
	catalog: aCatalog
	andMerchantProcessor: aMerchantProcessor! !

!methodRemoval: Interface class #newWith:salesBook:date:and: stamp: 'DH 11/11/2019 20:39:43'!
newWith: aClientDictionary salesBook: aSalesBook date: aTodayDate and: aCatalog

	^ self new initializeWith: aClientDictionary salesBook: aSalesBook date: aTodayDate and: aCatalog.!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/11/2019 20:40:25'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook today merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:40:23'!
initializeWith: aClientDictionary
salesBook: aSalesBook
date: aTodayDate
catalog: aCatalog
andMerchantProcessor: aMerchantProcessor

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.
	salesBook _ aSalesBook.
	today _ aTodayDate.
	merchantProcessor _ aMerchantProcessor.! !

!methodRemoval: Interface #initializeWith:salesBook:date:and: stamp: 'DH 11/11/2019 20:40:28'!
initializeWith: aClientDictionary salesBook: aSalesBook date: aTodayDate and: aCatalog 

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.
	salesBook _ aSalesBook.
	today _ aTodayDate.!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:42:22'!
createInterfaceWith: aSalesBook and: aMerchantProcessor
		
	^ Interface
	newWithClients: self clients
	salesBook: aSalesBook
	date: today
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:42:38' prior: 50783546!
createInterfaceWith: aSalesBook and: aMerchantProcessor
		
	^ Interface newWith: self clients salesBook: aSalesBook date: today and: self defaultCatalog ! !

!methodRemoval: StoreTestObjectsFactory #createInterface stamp: 'DH 11/11/2019 20:43:03'!
createInterface
		
	^ self createInterfaceWith: OrderedCollection new.!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:43:44' prior: 50783405!
createInterfaceWith: aMerchantProcessor
		
	^ self createInterfaceWith: OrderedCollection new and: aMerchantProcessor! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:44:47' prior: 50783557!
createInterfaceWith: aSalesBook and: aMerchantProcessor
		
	^ Interface
	newWithClients: self clients
	salesBook: aSalesBook
	date: today
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:45:33'!
FAILURE!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:45:33'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:46:25' prior: 50783445!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|creditCard cashier|
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: (carts at: aCartID)
		charging: creditCard
		throught: merchantProcessor
		on: today
		registeringOn: salesBook.
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/11/2019 20:47:17' prior: 50783595!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|creditCard cashier|
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: (carts at: aCartID)
		charging: creditCard
		throught: merchantProcessor
		on: today
		registeringOn: salesBook.
	
	cashier checkOut.! !

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:47:31'!
ERROR!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:47:31'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:49:30' prior: 50781612!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ testObjectFactory createInterfaceWith: self.
	self should: [interface createCartWithClientID: testObjectFactory invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidClientIDErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:49:42' prior: 50778046!
test02CannotCreateCartWithIncorrectPassword

	|interface|
	interface _ testObjectFactory createInterfaceWith: self.
	self should: [interface createCartWithClientID: testObjectFactory validClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface incorrectPasswordErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:49:49' prior: 50781186!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2 cartID1 cartID2|
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	interface _ testObjectFactory createInterfaceWith: self.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory clients at: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory clients at: clientID2).
	
	self deny: cartID1 = cartID2.
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:49:58' prior: 50781961!
test04CannotAddBookToNonExistentCart

	|interface book invalidCart|
	
	interface _ testObjectFactory createInterfaceWith: self.
	book _ testObjectFactory itemSellByTheStore.
	invalidCart _ 95173.
	
	self should: [interface add: 1 of: book to: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 20:49:59'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 20:49:59'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 20:49:59'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 20:49:59'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 20:49:59'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 20:49:59'!
ERROR!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 20:49:59'!
ERROR!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 20:49:59'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 20:49:59'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 20:49:59'!
ERROR!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 20:49:59'!
ERROR!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:49:59'!
ERROR!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 20:50:07'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 20:50:07'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 20:50:07'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 20:50:07'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 20:50:07'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 20:50:07'!
ERROR!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 20:50:07'!
ERROR!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 20:50:07'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 20:50:07'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 20:50:07'!
ERROR!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 20:50:07'!
ERROR!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:50:07'!
ERROR!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 20:50:11'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:50:18' prior: 50781561!
test05CannotListANonExistentCart

	|interface invalidCart|
	
	interface _ testObjectFactory createInterfaceWith: self.
	invalidCart _ 95173.
	
	self should: [interface list: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:50:33' prior: 50781674!
test06ListingAnEmptyCartResultsInEmptyList

	|interface client cart|
	
	interface _ testObjectFactory createInterfaceWith: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self assert: (interface list: cart) isEmpty
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:50:41' prior: 50782259!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterfaceWith: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	self assert: (OrderedCollection with: book1 with: book2) equals: (interface list: cart)


	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:50:44' prior: 50782801!
test10CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWith: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
		].	
	
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/11/2019 20:50:59' prior: 50783281!
test11CheckoutWorks

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWith: salesBook and: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart withCardNumber: testObjectFactory validCreditCardNumber
	 withExpirationDate:  testObjectFactory futureDate withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 20:51:31'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 20:51:31'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 20:51:31'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 20:51:31'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 20:51:31'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 20:51:31'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 20:51:31'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 20:51:32'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 20:51:32'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 20:51:32'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:51:32'!
FAILURE!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:51:32'!
FAILURE!
!Sale methodsFor: 'comparison' stamp: 'DH 11/11/2019 20:53:21'!
= anotherSale

	^total = anotherSale total! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/11/2019 20:53:36'!
PASSED!

----SNAPSHOT----(11 November 2019 20:54:02) CuisUniversity-3938.image priorSource: 14439285!

----QUIT----(11 November 2019 20:54:15) CuisUniversity-3938.image priorSource: 14473917!

----STARTUP---- (14 November 2019 17:23:45) as /home/dhuaier/Desktop/linux64/CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/14/2019 17:35:24'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/14/2019 17:35:25'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/14/2019 17:35:25'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/14/2019 17:35:25'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/14/2019 17:35:25'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/14/2019 17:35:25'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/14/2019 17:35:25'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/14/2019 17:35:25'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/14/2019 17:35:25'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'DH 11/14/2019 18:43:33'!
createInterfaceWithMerchantProcessor: aMerchantProcessor
		
	^ self createInterfaceWith: OrderedCollection new and: aMerchantProcessor! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:43:33' prior: 50783636!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface createCartWithClientID: testObjectFactory invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidClientIDErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:43:33' prior: 50783670!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2 cartID1 cartID2|
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory clients at: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory clients at: clientID2).
	
	self deny: cartID1 = cartID2.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:43:33' prior: 50783653!
test02CannotCreateCartWithIncorrectPassword

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface createCartWithClientID: testObjectFactory validClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface incorrectPasswordErrorMessage equals: anError messageText.
		]
	"Habría que chequear que no se creó ningún carrito... Cómo lo hacemos????"! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:43:33' prior: 50783689!
test04CannotAddBookToNonExistentCart

	|interface book invalidCart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	invalidCart _ 95173.
	
	self should: [interface add: 1 of: book to: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:43:33' prior: 50783805!
test06ListingAnEmptyCartResultsInEmptyList

	|interface client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self assert: (interface list: cart) isEmpty
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:43:33' prior: 50783818!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	self assert: (OrderedCollection with: book1 with: book2) equals: (interface list: cart)


	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:43:34' prior: 50783838!
test10CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
		].	
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:43:34' prior: 50783791!
test05CannotListANonExistentCart

	|interface invalidCart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	invalidCart _ 95173.
	
	self should: [interface list: invalidCart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	! !

!methodRemoval: StoreTestObjectsFactory #createInterfaceWith: stamp: 'DH 11/14/2019 18:43:34'!
createInterfaceWith: aMerchantProcessor
		
	^ self createInterfaceWith: OrderedCollection new and: aMerchantProcessor!
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'DH 11/14/2019 18:44:22'!
createInterfaceWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^ Interface
	newWithClients: self clients
	salesBook: aSalesBook
	date: today
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:44:22' prior: 50784052!
createInterfaceWithMerchantProcessor: aMerchantProcessor
		
	^ self createInterfaceWithSalesBook: OrderedCollection new andMerchantProcessor: aMerchantProcessor! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:44:22' prior: 50783857!
test11CheckoutWorks

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart withCardNumber: testObjectFactory validCreditCardNumber
	 withExpirationDate:  testObjectFactory futureDate withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:44:22' prior: 50784223!
createInterfaceWithMerchantProcessor: aMerchantProcessor
		
	^ self createInterfaceWithSalesBook: OrderedCollection new andMerchantProcessor: aMerchantProcessor! !

!methodRemoval: StoreTestObjectsFactory #createInterfaceWith:and: stamp: 'DH 11/14/2019 18:44:22'!
createInterfaceWith: aSalesBook and: aMerchantProcessor
		
	^ Interface
	newWithClients: self clients
	salesBook: aSalesBook
	date: today
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor !
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'DH 11/14/2019 18:45:51'!
clientsWithPasswords

	|clients|
	clients _ Dictionary new.
	clients at: self validClientID put: 'flan'.
	clients at: self anotherValidClientID put: 'rosebud'.
	^clients! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:45:51' prior: 50784212!
createInterfaceWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^ Interface
	newWithClients: self clientsWithPasswords
	salesBook: aSalesBook
	date: today
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:45:51' prior: 50784150!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	self assert: (OrderedCollection with: book1 with: book2) equals: (interface list: cart)


	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:45:51' prior: 50784078!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2 cartID1 cartID2|
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory clientsWithPasswords at: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory clientsWithPasswords at: clientID2).
	
	self deny: cartID1 = cartID2.
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:45:51' prior: 50784136!
test06ListingAnEmptyCartResultsInEmptyList

	|interface client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	
	self assert: (interface list: cart) isEmpty
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:45:51' prior: 50784232!
test11CheckoutWorks

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart withCardNumber: testObjectFactory validCreditCardNumber
	 withExpirationDate:  testObjectFactory futureDate withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 18:45:51' prior: 50784285!
createInterfaceWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^ Interface
	newWithClients: self clientsWithPasswords
	salesBook: aSalesBook
	date: today
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: StoreTestObjectsFactory #clients stamp: 'DH 11/14/2019 18:45:51'!
clients

	|clients|
	clients _ Dictionary new.
	clients at: self validClientID put: 'flan'.
	clients at: self anotherValidClientID put: 'rosebud'.
	^clients!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'DH 11/14/2019 18:46:08' prior: 50778068!
validClientID
	
	^123456! !
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'DH 11/14/2019 18:46:14' prior: 50778025!
invalidClientID
	
	^42! !
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'DH 11/14/2019 18:46:39' prior: 50784258!
createInterfaceWithMerchantProcessor: aMerchantProcessor
		
	^self createInterfaceWithSalesBook: OrderedCollection new andMerchantProcessor: aMerchantProcessor! !
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'DH 11/14/2019 18:46:44' prior: 50784381!
createInterfaceWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^Interface
	newWithClients: self clientsWithPasswords
	salesBook: aSalesBook
	date: today
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/14/2019 18:47:09' prior: 50782588!
validCreditCardNumber
	
	^'1234567890123456'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/14/2019 18:47:12' prior: 50782632!
validOwner

	^'Juan Juan'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/14/2019 18:47:36'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/14/2019 18:47:36'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:51:18' prior: 50784116!
test04CannotAddBookToNonExistentCart

	|interface book invalidCart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	invalidCart _ 95173.
	
	self should: [interface add: 1 of: book to: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:51:29' prior: 50784519!
test04CannotAddBookToNonExistentCart

	|interface book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	
	self should: [interface add: 1 of: book to: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:52:05' prior: 50784540!
test04CannotAddBookToNonExistentCart

	|interface book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	
	self should: [interface add: 1 of: book to: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
	].
	
	"En este caso no hay que chequear que no se haya agregado el libro porque el Carrito ni siquiera existe."
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:52:12' prior: 50784560!
test04CannotAddBookToNonExistentCart

	|interface book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	
	self should: [interface add: 1 of: book to: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
	].
	! !

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/14/2019 18:52:15'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutWorks stamp: 'DH 11/14/2019 18:52:15'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:52:34' prior: 50784191!
test05CannotListANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	
	self should: [interface list: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText
		].
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:53:49' prior: 50782649!
test07CannotAddBookThatDoesNotBelongToEditorial
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
		
	"
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:56:39' prior: 50784171!
test10CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].	
	
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:59:01' prior: 50784354!
test11CheckoutWorks

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 18:59:45'!
test11CheckoutOfValidCartMakesTheSale

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !

!methodRemoval: InterfaceTest #test11CheckoutWorks stamp: 'DH 11/14/2019 18:59:45'!
test11CheckoutWorks

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:00:15'!
test11CheckoutOfValidCartMakesTheSaleWithCorrectCost

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !

!methodRemoval: InterfaceTest #test11CheckoutOfValidCartMakesTheSale stamp: 'DH 11/14/2019 19:00:15'!
test11CheckoutOfValidCartMakesTheSale

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/14/2019 19:00:24'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/14/2019 19:00:25'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/14/2019 19:00:25'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/14/2019 19:00:25'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/14/2019 19:00:25'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:10:06'!
test12CheckoutedCartCannotBeModified

	|interface cart client book salesBook|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface someError equals: anError messageText.
	].
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:10:34' prior: 50784906!
test12CheckoutedCartCannotBeModified

	|interface cart client book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface someError equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:11:00'!
test12CheckoutedCartCannotBeListed

	|interface cart client book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface someError equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:11:08'!
test13CheckoutedCartCannotBeListed

	|interface cart client book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface someError equals: anError messageText.
	].! !

!methodRemoval: InterfaceTest #test12CheckoutedCartCannotBeListed stamp: 'DH 11/14/2019 19:11:08'!
test12CheckoutedCartCannotBeListed

	|interface cart client book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface someError equals: anError messageText.
	].!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/14/2019 19:12:32'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/14/2019 19:12:32'!
FAILURE!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/14/2019 19:12:32'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'DH 11/14/2019 19:13:30'!
itemsAsOrderedCollection

	^items copy.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/14/2019 19:13:30' prior: 50782396!
list: aCartID

	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	^(carts at: aCartID) itemsAsOrderedCollection.! !

!methodRemoval: Cart #copyOfItems stamp: 'DH 11/14/2019 19:13:30'!
copyOfItems

	^items copy.!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:16:31'!
test14CheckoutedCartCannotBeListed

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:16:50'!
test14CannotListPurchasesOfNonExistentClient

	! !

!methodRemoval: InterfaceTest #test14CheckoutedCartCannotBeListed stamp: 'DH 11/14/2019 19:16:51'!
test14CheckoutedCartCannotBeListed

	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:17:22'!
test15CannotListPurchasesOfClientUsingWrongPassword

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:18:59' prior: 50785151!
test14CannotListPurchasesOfNonExistentClient

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory invalidClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidClientIDErrorMessage equals: anError messageText.
		]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:19:14' prior: 50785165!
test14CannotListPurchasesOfNonExistentClient

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory invalidClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidClientIDErrorMessage equals: anError messageText.
	]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/14/2019 19:20:19' prior: 50785160!
test15CannotListPurchasesOfClientUsingWrongPassword

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory validClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface incorrectPasswordErrorMessage equals: anError messageText.
	]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/14/2019 19:20:29'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/14/2019 19:20:29'!
FAILURE!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/14/2019 19:20:29'!
FAILURE!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/14/2019 19:20:29'!
ERROR!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/14/2019 19:20:29'!
ERROR!

----SNAPSHOT----(14 November 2019 19:20:48) CuisUniversity-3938.image priorSource: 14474011!

----QUIT----(14 November 2019 19:20:59) CuisUniversity-3938.image priorSource: 14517001!

----STARTUP---- (16 November 2019 09:40:20) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/16/2019 09:40:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/16/2019 09:40:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/16/2019 09:40:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/16/2019 09:40:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 09:40:44'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 09:40:45'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 09:40:45'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 09:40:45'!
FAILURE!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 09:40:45'!
FAILURE!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 09:40:45'!
ERROR!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 09:40:45'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 09:56:54'!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory validClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface incorrectPasswordErrorMessage equals: anError messageText.
	]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 10:05:03' prior: 50785413!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory clientsWithPasswords at: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (interface listPurchasesOf: client withPassword: password) equals: 1.! !

----SNAPSHOT----(16 November 2019 12:13:44) CuisUniversity-3938.image priorSource: 14517095!
!Interface methodsFor: 'client operations' stamp: 'DH 11/16/2019 13:07:27'!
listPurchasesOf: aClientID withPassword: aPassword

	self error: self class invalidClientIDErrorMessage! !

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 13:07:39'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:07:42'!
FAILURE!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:07:42'!
FAILURE!
!Interface methodsFor: 'client operations' stamp: 'DH 11/16/2019 13:09:19' prior: 50785471!
listPurchasesOf: aClientID withPassword: aPassword

	(clients includesKey: aClientID) ifFalse: [self error: self class invalidClientIDErrorMessage.]! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 13:09:51' prior: 50785136!
list: aCartID

	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	^(carts at: aCartID) itemsAsOrderedCollection.! !
!Interface methodsFor: 'client operations' stamp: 'DH 11/16/2019 13:12:30' prior: 50785489!
listPurchasesOf: aClientID withPassword: aPassword

	|clientPassword|
	clientPassword _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	clientPassword = aPassword ifFalse: [self error: self class incorrectPasswordErrorMessage.].! !

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:12:35'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 13:12:37'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 13:12:39'!
FAILURE!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 13:12:39'!
FAILURE!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 13:12:46'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 13:12:46'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 13:12:46'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 13:12:46'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 13:12:47'!
FAILURE!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 13:12:47'!
FAILURE!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:12:47'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 13:12:47'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/16/2019 13:24:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/16/2019 13:24:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/16/2019 13:24:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 13:24:40'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 13:24:41'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:24:41'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 13:24:41'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 13:24:41'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 13:24:41'!
FAILURE!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 13:24:41'!
FAILURE!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 13:24:41'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:24:41'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 13:24:41'!
FAILURE!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 13:42:18'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 13:42:18'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 13:42:18'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 13:42:18'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 13:42:18'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 13:42:18'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 13:42:19'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 13:42:19'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:42:19'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 13:42:19'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 13:42:19'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 13:42:19'!
FAILURE!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 13:42:19'!
FAILURE!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 13:42:19'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:42:19'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 13:42:19'!
FAILURE!
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 13:45:20' prior: 50783613!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|creditCard cashier|
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: (carts at: aCartID)
		charging: creditCard
		throught: merchantProcessor
		on: today
		registeringOn: salesBook.
	
	cashier checkOut.
	self removeCart: aCartID.! !
!Interface methodsFor: 'cart operations - private' stamp: 'DH 11/16/2019 13:46:11'!
removeCart: aCartID

	carts removeKey: aCartID.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 13:46:27'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 13:46:27'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 13:46:27'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 13:46:28'!
ERROR!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 13:46:28'!
ERROR!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:46:28'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 13:46:28'!
FAILURE!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 13:47:03' prior: 50784937!
test12CheckoutedCartCannotBeModified

	|interface cart client book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 13:47:11' prior: 50784989!
test13CheckoutedCartCannotBeListed

	|interface cart client book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:47:16'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 13:47:16'!
FAILURE!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 13:47:16'!
FAILURE!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 13:48:52' prior: 50784296!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	self assert: (Dictionary new; at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart).


	! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:49:03'!
ERROR!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:49:20'!
ERROR!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:49:20'!
ERROR!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:49:39'!
ERROR!

d _ Dictionary new.!

d at: 'hola' put: 4!

d at: 'hola' put: 4!

d at: 'hola'!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 13:52:57' prior: 50785932!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart expectedList|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	expectedList _ Dictionary new.
	expectedList at: book1 put: 1.
	"self assert: (Dictionary new; at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart)."


	! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 13:52:58'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 13:52:59'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 13:52:59'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 13:52:59'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 13:52:59'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 13:52:59'!
FAILURE!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 13:52:59'!
FAILURE!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:53:06'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 13:53:24' prior: 50785969!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart expectedList|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	expectedList _ Dictionary new; at: book1 put: 1.
	"expectedList at: book1 put: 1."
	"self assert: (Dictionary new; at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart)."


	! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:53:32'!
ERROR!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:53:32'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 13:53:56' prior: 50786058!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart expectedList|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	expectedList _ Dictionary new.
	expectedList at: book1 put: 1.
	expectedList at: book2 put: 2.
	"expectedList at: book1 put: 1."
	"self assert: (Dictionary new; at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart)."


	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 13:55:02' prior: 50786089!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart expectedList|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	"expectedList _ Dictionary new.
	expectedList at: book1 put: 1.
	expectedList at: book2 put: 2.
	expectedList at: book1 put: 1."
	self assert: (Dictionary new at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart).


	! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:55:08'!
FAILURE!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 13:55:08'!
FAILURE!
!Cart methodsFor: 'traversal' stamp: 'DH 11/16/2019 14:41:42'!
itemsDo: aBlock

	items do: aBlock! !

!methodRemoval: Cart #itemsAsOrderedCollection stamp: 'DH 11/16/2019 14:42:02'!
itemsAsOrderedCollection

	^items copy.!
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 14:42:35' prior: 50785497!
list: aCartID

	carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.].
	^(carts at: aCartID) itemsAsOrderedCollection.! !

a := 5!

5 sumTo: a !

a!

a!

1 sumTo: a!

1 sumTo: a!

1 sumTo: a!

a!

a increment!

d _ Dictionary new!

d at: #a ifAbsent: [52.].!

d at: #b ifAbsent: [d at: #b put: 52.].!
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 14:56:58' prior: 50786155!
list: aCartID

	|cart itemsWithQuantities|
	cart _ carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.].
	itemsWithQuantities _ Dictionary new.
	cart itemsDo: [:item | | oldQuantity |
		oldQuantity _ itemsWithQuantities at: item ifAbsent: [itemsWithQuantities at: item put: 0.].
		itemsWithQuantities at: item put: oldQuantity + 1.
	].

	^itemsWithQuantities! !

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 14:57:12'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 14:57:19' prior: 50786115!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	self assert: (Dictionary new at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart).


	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 14:57:27'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 14:57:27'!
FAILURE!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 14:57:27'!
FAILURE!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 14:58:11' prior: 50785428!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory clientsWithPasswords at: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: 1 equals: (interface listPurchasesOf: client withPassword: password).! !

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 14:58:13'!
FAILURE!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 14:59:06' prior: 50786267!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory clientsWithPasswords at: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:11:23' prior: 50785741!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cart creditCard cashier|
	
	cart _ carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cart
		charging: creditCard
		throught: merchantProcessor
		on: today
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cart to: 2.
	self removeCart: aCartID.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:12:28' prior: 50782375!
createCartWithClientID: aClientID andPassword: aPassword

	|clientPassword|
	clientPassword _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	(clientPassword = aPassword) ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (Cart acceptingItemsOf: catalog).
	^ lastCartID! !

Object subclass: #CartInfo
	instanceVariableNames: 'cart clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInfo category: #TusLibros stamp: 'DH 11/16/2019 15:14:31'!
Object subclass: #CartInfo
	instanceVariableNames: 'cart clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInfo class methodsFor: 'instance creation' stamp: 'DH 11/16/2019 15:15:53'!
for: aCart ownedBy: aClientID

	^self new initializeWithCart: aCart andOwner: aClientID! !

!classDefinition: #CartInfo category: #TusLibros stamp: 'DH 11/16/2019 15:16:58'!
Object subclass: #CartInfo
	instanceVariableNames: 'cart clientID ownerID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInfo methodsFor: 'initialization' stamp: 'DH 11/16/2019 15:16:56'!
initializeWithCart: aCart andOwner: aClientID

	cart _ aCart.
	ownerID _ aClientID! !

Object subclass: #CartInfo
	instanceVariableNames: 'cart ownerID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInfo category: #TusLibros stamp: 'DH 11/16/2019 15:17:03'!
Object subclass: #CartInfo
	instanceVariableNames: 'cart ownerID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInfo methodsFor: 'queries' stamp: 'DH 11/16/2019 15:17:29'!
cart

	^cart! !
!CartInfo methodsFor: 'queries' stamp: 'DH 11/16/2019 15:17:38'!
ownerID

	^ownerID! !

Object subclass: #ClientInfo
	instanceVariableNames: 'password purchaseList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInfo category: #TusLibros stamp: 'DH 11/16/2019 15:18:49'!
Object subclass: #ClientInfo
	instanceVariableNames: 'password purchaseList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInfo class methodsFor: 'instance creation' stamp: 'DH 11/16/2019 15:20:00'!
forClientWithPassword: aPassword

	^self new initalizeWithPassword: aPassword! !
!ClientInfo methodsFor: 'initialization' stamp: 'DH 11/16/2019 15:20:41'!
initializeWithPassword: aPassword

	password _ aPassword.
	purchaseList _ Dictionary new.! !
!ClientInfo methodsFor: 'queries' stamp: 'DH 11/16/2019 15:21:03'!
password

	^password! !
!ClientInfo methodsFor: 'queries' stamp: 'DH 11/16/2019 15:21:23'!
purchaseList

	^purchaseList! !
!Interface methodsFor: 'client operations' stamp: 'DH 11/16/2019 15:22:31' prior: 50785505!
listPurchasesOf: aClientID withPassword: aPassword

	|clientInfo|
	clientInfo _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	clientInfo password = aPassword ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	^clientInfo purchaseList.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:22:50' prior: 50786373!
createCartWithClientID: aClientID andPassword: aPassword

	|clientInfo|
	clientInfo _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	(clientInfo password = aPassword) ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (Cart acceptingItemsOf: catalog).
	^ lastCartID! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:22:54' prior: 50786477!
createCartWithClientID: aClientID andPassword: aPassword

	|clientInfo|
	clientInfo _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	clientInfo password = aPassword ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (Cart acceptingItemsOf: catalog).
	^ lastCartID! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:24:01' prior: 50786492!
createCartWithClientID: aClientID andPassword: aPassword

	|clientInfo|
	clientInfo _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	clientInfo password = aPassword ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (CartInfo for: (Cart acceptingItemsOf: catalog) ownedBy: aClientID).
	^lastCartID! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:25:31' prior: 50786507!
createCartWithClientID: aClientID andPassword: aPassword

	|clientInfo|
	clientInfo _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	clientInfo password = aPassword ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (CartInfo for: (Cart acceptingItemsOf: catalog) ownedBy: aClientID).
	^lastCartID! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:26:42' prior: 50786169!
list: aCartID

	|cart itemsWithQuantities|
	cart _ ( carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.] ) cart.
	itemsWithQuantities _ Dictionary new.
	cart itemsDo: [:item | | oldQuantity |
		oldQuantity _ itemsWithQuantities at: item ifAbsent: [itemsWithQuantities at: item put: 0.].
		itemsWithQuantities at: item put: oldQuantity + 1.
	].

	^itemsWithQuantities! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:28:00' prior: 50782696!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cart|
	cart _ ( carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.] ) cart.
	(carts at: aCartID) add: aNumberOfBooks of: aBookISBN.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:28:16' prior: 50786555!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cart|
	cart _ ( carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.] ) cart.
	cart add: aNumberOfBooks of: aBookISBN.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:28:56' prior: 50786354!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cart creditCard cashier|
	
	cart _ carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cart cart
		charging: creditCard
		throught: merchantProcessor
		on: today
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cart to: 2.
	self removeCart: aCartID.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:30:01' prior: 50786574!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cart creditCard cashier|
	
	cart _ carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cart cart
		charging: creditCard
		throught: merchantProcessor
		on: today
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cart cart to: cart ownerID.
	self removeCart: aCartID.! !
!Interface methodsFor: 'client operations' stamp: 'DH 11/16/2019 15:34:19'!
addItemsFrom: aCart to: aClientID

	! !
!Interface methodsFor: 'client operations' stamp: 'DH 11/16/2019 15:36:01' prior: 50786614!
addItemsFrom: aCart to: aClientID

	|clientPurchaseList|
	clientPurchaseList _ (clients at: aClientID) purchaseList.
	aCart itemsDo: [:item | | oldQuantity |
		oldQuantity _ clientPurchaseList at: item ifAbsent: [clientPurchaseList at: item put: 0.].
		clientPurchaseList at: item put: oldQuantity + 1.
	].! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:37:18' prior: 50786594!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	
	cartInfo _ carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: today
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cartInfo cart to: cartInfo ownerID.
	self removeCart: aCartID.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 15:37:33'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 15:37:33'!
ERROR!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 15:37:33'!
ERROR!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 15:37:33'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 15:37:33'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 15:37:33'!
ERROR!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 15:37:33'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 15:37:33'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 15:37:33'!
ERROR!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 15:37:33'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 15:37:33'!
ERROR!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 15:37:33'!
ERROR!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 15:37:33'!
ERROR!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 15:37:33'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 15:37:34'!
ERROR!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 15:37:34'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 15:37:44'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 15:37:46'!
ERROR!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 15:37:46'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'DH 11/16/2019 15:38:57' prior: 50784276!
clientsWithPasswords

	|clients|
	clients _ Dictionary new.
	clients at: self validClientID put: (ClientInfo forClientWithPassword: 'flan').
	clients at: self anotherValidClientID put: (ClientInfo forClientWithPassword: 'rosebud').
	^clients! !
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'DH 11/16/2019 15:39:52'!
passwordFor: aClientID

	^(self clientsWithPasswords at: aClientID) password! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:41:05' prior: 50784318!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2 cartID1 cartID2|
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory passwordFor: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory passwordFor: clientID2).
	
	self deny: cartID1 = cartID2.
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:41:20' prior: 50786735!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2 cartID1 cartID2|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory passwordFor: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory passwordFor: clientID2).
	
	self deny: cartID1 = cartID2.
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:41:52' prior: 50784339!
test06ListingAnEmptyCartResultsInEmptyList

	|interface client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self assert: (interface list: cart) isEmpty
	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:42:17' prior: 50786187!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	self assert: (Dictionary new at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart).


	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:42:54' prior: 50784769!
test11CheckoutOfValidCartMakesTheSaleWithCorrectCost

	|interface cart client book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:43:05' prior: 50786810!
test11CheckoutOfValidCartMakesTheSaleWithCorrectCost

	|interface client cart book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:43:28' prior: 50785820!
test12CheckoutedCartCannotBeModified

	|interface cart client book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:43:43' prior: 50785847!
test13CheckoutedCartCannotBeListed

	|interface cart client book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:43:51' prior: 50786864!
test12CheckoutedCartCannotBeModified

	|interface client cart book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:43:58' prior: 50786891!
test13CheckoutedCartCannotBeListed

	|interface client cart book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:44:57' prior: 50786311!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory clientsWithPasswords at: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:45:25' prior: 50786970!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:45:43' prior: 50787012!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clientsWithPasswords at: client).
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/16/2019 15:45:55' prior: 50787054!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 15:46:07'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 15:46:07'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 15:46:07'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 15:46:14'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 15:46:14'!
ERROR!
!ClientInfo class methodsFor: 'instance creation' stamp: 'DH 11/16/2019 15:46:34' prior: 50786447!
forClientWithPassword: aPassword

	^self new initializeWithPassword: aPassword! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 15:46:35'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 15:46:35'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 15:46:35'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 15:46:35'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 15:46:35'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 15:46:35'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 15:46:35'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 15:46:36'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 15:46:39'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 15:46:40'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 15:46:40'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 15:46:40'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 15:46:40'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 15:46:40'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 15:46:40'!
PASSED!
!Interface methodsFor: 'utility - private' stamp: 'DH 11/16/2019 15:53:02'!
update: aDictionary withItemsFrom: aCart

	! !
!Interface methodsFor: 'utility - private' stamp: 'DH 11/16/2019 15:54:16' prior: 50787311!
update: aDictionary withItemsFrom: aCart

	aCart itemsDo: [:item | | oldQuantity |
		oldQuantity _ aDictionary at: item ifAbsent: [aDictionary at: item put: 0.].
		aDictionary at: item put: oldQuantity + 1.
	].! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 15:55:30' prior: 50786539!
list: aCartID

	|cart cartItemsWithQuantities|
	cart _ ( carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.] ) cart.
	cartItemsWithQuantities _ Dictionary new.
	self update: cartItemsWithQuantities withItemsFrom: cart. 
	^cartItemsWithQuantities! !
!Interface methodsFor: 'client operations - private' stamp: 'DH 11/16/2019 15:56:08' prior: 50786619!
addItemsFrom: aCart to: aClientID

	|clientPurchaseList|
	clientPurchaseList _ (clients at: aClientID) purchases.
	aCart itemsDo: [:item | | oldQuantity |
		oldQuantity _ clientPurchaseList at: item ifAbsent: [clientPurchaseList at: item put: 0.].
		clientPurchaseList at: item put: oldQuantity + 1.
	].! !
!ClientInfo methodsFor: 'queries' stamp: 'DH 11/16/2019 15:56:18'!
purchases

	^purchaseList! !

!classDefinition: #ClientInfo category: #TusLibros stamp: 'DH 11/16/2019 15:56:24'!
Object subclass: #ClientInfo
	instanceVariableNames: 'password purchaseList purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInfo methodsFor: 'queries' stamp: 'DH 11/16/2019 15:56:21' prior: 50787350!
purchases

	^purchases! !

Object subclass: #ClientInfo
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInfo category: #TusLibros stamp: 'DH 11/16/2019 15:56:29'!
Object subclass: #ClientInfo
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInfo methodsFor: 'initialization' stamp: 'DH 11/16/2019 15:56:40' prior: 50786452!
initializeWithPassword: aPassword

	password _ aPassword.
	purchases _ Dictionary new.! !

!methodRemoval: ClientInfo #purchaseList stamp: 'DH 11/16/2019 15:56:45'!
purchaseList

	^purchaseList!
!Interface methodsFor: 'client operations' stamp: 'DH 11/16/2019 15:57:24' prior: 50786464!
listPurchasesOf: aClientID withPassword: aPassword

	|clientInfo|
	clientInfo _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	clientInfo password = aPassword ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	^clientInfo purchases.! !
!Interface methodsFor: 'client operations - private' stamp: 'DH 11/16/2019 15:59:14' prior: 50787338!
addItemsFrom: aCart to: aClientID

	|clientPurchases|
	clientPurchases _ (clients at: aClientID) purchases.
	self update: clientPurchases withItemsFrom: aCart.! !
!Interface methodsFor: 'client operations - private' stamp: 'DH 11/16/2019 16:01:30'!
getInfoFromClientWithID: aClientID validatingPassword: aPassword

	! !
!Interface methodsFor: 'client operations - private' stamp: 'DH 11/16/2019 16:02:08' prior: 50787408!
getInfoFromClientWithID: aClientID validatingPassword: aPassword

	|clientInfo|
	clientInfo _ clients at: aClientID ifAbsent: [self error: self class invalidClientIDErrorMessage.].
	clientInfo password = aPassword ifFalse: [self error: self class incorrectPasswordErrorMessage.].
	^clientInfo! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 16:03:12' prior: 50786523!
createCartWithClientID: aClientID andPassword: aPassword

	|clientInfo|
	clientInfo _ self getInfoFromClientWithID: aClientID validatingPassword: aPassword.
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (CartInfo for: (Cart acceptingItemsOf: catalog) ownedBy: aClientID).
	^lastCartID! !
!Interface methodsFor: 'client operations' stamp: 'DH 11/16/2019 16:04:31' prior: 50787387!
listPurchasesOf: aClientID withPassword: aPassword

	|clientInfo|
	clientInfo _ self getInfoFromClientWithID: aClientID validatingPassword: aPassword.
	^clientInfo purchases.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 16:05:42' prior: 50787427!
createCartWithClientID: aClientID andPassword: aPassword

	self getInfoFromClientWithID: aClientID validatingPassword: aPassword.
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (CartInfo for: (Cart acceptingItemsOf: catalog) ownedBy: aClientID).
	^lastCartID! !
!Interface methodsFor: 'cart operations - private' stamp: 'DH 11/16/2019 16:08:10'!
getInfoFromCartWithID: aCartID

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.]! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 16:08:33' prior: 50786565!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cart|
	cart _ (self getInfoFromCartWithID: aCartID) cart.
	cart add: aNumberOfBooks of: aBookISBN.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 16:08:57' prior: 50787326!
list: aCartID

	|cart cartItemsWithQuantities|
	cart _ (self getInfoFromCartWithID: aCartID) cart.
	cartItemsWithQuantities _ Dictionary new.
	self update: cartItemsWithQuantities withItemsFrom: cart. 
	^cartItemsWithQuantities! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/16/2019 16:09:31' prior: 50786632!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: today
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cartInfo cart to: cartInfo ownerID.
	self removeCart: aCartID.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 16:10:20'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 16:10:20'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 16:10:20'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 16:10:20'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 16:10:20'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 16:10:20'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 16:10:20'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 16:10:20'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 16:10:21'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 16:10:21'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 16:10:21'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 16:10:21'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 16:10:21'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 16:10:21'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 16:10:21'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 16:10:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/16/2019 16:11:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 16:11:08'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/16/2019 16:11:12'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/16/2019 16:11:13'!
PASSED!

----SNAPSHOT----(16 November 2019 16:11:19) CuisUniversity-3938.image priorSource: 14522161!

----QUIT----(16 November 2019 16:11:30) CuisUniversity-3938.image priorSource: 14595544!

----STARTUP---- (17 November 2019 08:45:47) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/17/2019 08:46:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/17/2019 08:46:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/17/2019 08:46:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/17/2019 08:46:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 08:46:02'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 08:46:03'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 08:46:03'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 08:46:03'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 08:46:03'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 08:46:03'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 08:46:03'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 08:46:03'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 08:46:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/17/2019 08:47:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 08:47:47'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 08:47:48'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 08:47:48'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 08:47:48'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 08:47:48'!
PASSED!

a := Date now!

a := Date today!

a!

a := Date dateAndTimeNow!

a!

a first!

a second !

a := Time now!

a := Date dateAndTimeNow!

b := Date dateAndTimeNow !

a < b!

Object subclass: #TimeProvider
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TimeProvider category: #TusLibros stamp: 'DH 11/17/2019 08:57:04'!
Object subclass: #TimeProvider
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'date and time' stamp: 'DH 11/17/2019 09:14:39'!
stubTimeProvider
	
	^ today! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 09:14:39' prior: 50777712!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory stubTimeProvider
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 09:14:39' prior: 50777754!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory stubTimeProvider 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 09:14:39' prior: 50777668!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory stubTimeProvider
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 09:14:39' prior: 50777647!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory stubTimeProvider
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 09:14:39' prior: 50777686!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory stubTimeProvider
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 09:14:39' prior: 50777736!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory stubTimeProvider
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: StoreTestObjectsFactory #today stamp: 'DH 11/17/2019 09:14:39'!
today
	
	^ today!

----STARTUP---- (17 November 2019 09:15:41) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/17/2019 09:17:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 09:17:07'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 09:17:08'!
PASSED!

----QUIT----(17 November 2019 09:17:12) CuisUniversity-3938.image priorSource: 14595638!

----STARTUP---- (17 November 2019 12:06:31) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!

!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 12:07:59'!
test17CannotListACartIf30MinutesPassedSincleLastUsed

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 13:31:24'!
test17CannotListACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 13:39:04' prior: 50787916!
test17CannotListACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 30.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !

!methodRemoval: InterfaceTest #test17CannotListACartIf30MinutesPassedSincleLastUsed stamp: 'DH 11/17/2019 13:39:08'!
test17CannotListACartIf30MinutesPassedSincleLastUsed

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).!

!classDefinition: #StoreTestObjectsFactory category: #TusLibros stamp: 'DH 11/17/2019 13:40:15'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today stubTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'date and time' stamp: 'DH 11/17/2019 13:40:14'!
stubTimeProvider
	
	^stubTimeProvider! !

!classDefinition: #StubTimeProvider category: #TusLibros stamp: 'DH 11/17/2019 13:42:45'!
Object subclass: #StubTimeProvider
	instanceVariableNames: 'date time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'DH 11/17/2019 13:41:18' prior: 50777901!
initialize

	today := DateAndTime now.
	stubTimeProvider := StubTimeProvider newWithActualDateAndTime.! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'DH 11/17/2019 13:43:43' prior: 50788018!
initialize

	stubTimeProvider := StubTimeProvider newWithActualDateAndTime.! !

today := DateAndTime now!

today!

t := DateAndTime now.!

t2 := DateAndTime now.!

t2 - t!

diff := t2 - t.!

diff!

diff totalMinutes !

t2 + 30 !

t2 + 30!

t2 year!

t2 yearNumber!

t2 monthIndex!

t2 day!

t2 dayNumber!

t2 minutes!

t2 dayOfMonth!

DateAndTime year: 2020 month: 5 day: 24  hour: 8 minute: 36  second: 24. !

t3 := DateAndTime year: 2020 month: 5 day: 24  hour: 8 minute: 36  second: 24. !

t3 year!

t3 monthIndex!

t3 dayOfMonth!

t3 hour!

t3 minute!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/17/2019 14:00:21' prior: 50783061!
expiredCreditCard
	
	^CreditCard
	newWithNumber: '1234567891011120'
	owner: self validOwner
	expiringOn:
		(Month
			month: stubTimeProvider dateAndTime monthIndex
			year: stubTimeProvider dateAndTime yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/17/2019 14:01:14' prior: 50783070!
notExpiredCreditCard
	
	^CreditCard
	newWithNumber: '1234567891011120'
	owner: self validOwner
	expiringOn:
		(Month
			month: stubTimeProvider dateAndTime monthIndex
			year: stubTimeProvider dateAndTime yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'date and time' stamp: 'DH 11/17/2019 14:03:01' prior: 50782609!
futureDate

	^Month month: stubTimeProvider now monthIndex year: stubTimeProvider now yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'date and time' stamp: 'DH 11/17/2019 14:04:35' prior: 50777905!
today
	
	^stubTimeProvider now! !
!StoreTestObjectsFactory methodsFor: 'date and time' stamp: 'DH 11/17/2019 14:05:20' prior: 50788068!
futureDate

	^Month month: self today monthIndex year: self today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/17/2019 14:06:46' prior: 50788046!
expiredCreditCard
	
	^CreditCard
	newWithNumber: '1234567891011120'
	owner: self validOwner
	expiringOn: self pastDate! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DH 11/17/2019 14:06:57' prior: 50788057!
notExpiredCreditCard
	
	^CreditCard
	newWithNumber: '1234567891011120'
	owner: self validOwner
	expiringOn: self futureDate! !
!StoreTestObjectsFactory methodsFor: 'date and time' stamp: 'DH 11/17/2019 14:07:21'!
pastDate

	^Month month: self today monthIndex year: self today yearNumber - 1! !

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'stubTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: #TusLibros stamp: 'DH 11/17/2019 14:07:44'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'stubTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StubTimeProvider
	instanceVariableNames: 'dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StubTimeProvider category: #TusLibros stamp: 'DH 11/17/2019 14:08:11'!
Object subclass: #StubTimeProvider
	instanceVariableNames: 'dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #TimeProvider
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TimeProvider category: #TusLibros stamp: 'DH 11/17/2019 14:08:33'!
Object subclass: #TimeProvider
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimeProvider methodsFor: 'query time' stamp: 'DH 11/17/2019 14:09:45'!
now

	^self subclassResponsibility! !

TimeProvider subclass: #StubTimeProvider
	instanceVariableNames: 'dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StubTimeProvider category: #TusLibros stamp: 'DH 11/17/2019 14:10:01'!
TimeProvider subclass: #StubTimeProvider
	instanceVariableNames: 'dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StubTimeProvider class methodsFor: 'instance creation' stamp: 'DH 11/17/2019 14:10:39'!
newWithActualDateAndTime

	^self new initializeWithActualDateAndTime! !
!StubTimeProvider methodsFor: 'initialization' stamp: 'DH 11/17/2019 14:11:00'!
initializeWithActualDateAndTime

	dateAndTime _ DateAndTime now! !
!StubTimeProvider methodsFor: 'query time' stamp: 'DH 11/17/2019 14:11:12'!
now

	^dateAndTime! !

DateAndTime year: 2018 month: 3 day: 18 hour: 5 minute: 40 second: 35. !

d := DateAndTime year: 2018 month: 3 day: 18 hour: 5 minute: 40 second: 35. !

d!

d := DateAndTime year: 2018 month: 3 day: 18 hour: 5 minute: 70 second: 35.!

d := DateAndTime year: 2018 month: 3 day: 18 hour: 5 minute: 70 second: 35.!

d !

DateAndTime now minutes!

DateAndTime now minute!

DateAndTime now second!
!StubTimeProvider methodsFor: 'time manipulation' stamp: 'DH 11/17/2019 14:18:41'!
advanceMinutes: anAmountOfMinutes

	dateAndTime _ DateAndTime 
		year: dateAndTime yearNumber
		month: dateAndTime monthIndex
		day: dateAndTime dayOfMonth
		hour: dateAndTime hour
		minute: dateAndTime minute + anAmountOfMinutes
		second: dateAndTime second! !
!StubTimeProvider methodsFor: 'time manipulation' stamp: 'DH 11/17/2019 14:19:09'!
advanceDays: anAmountOfDays

	dateAndTime _ DateAndTime 
		year: dateAndTime yearNumber
		month: dateAndTime monthIndex
		day: dateAndTime dayOfMonth + anAmountOfDays
		hour: dateAndTime hour
		minute: dateAndTime minute
		second: dateAndTime second! !

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:20:40'!
FAILURE!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:20:40'!
FAILURE!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 14:20:51'!
ERROR!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 14:20:51'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 14:22:35'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 14:22:37'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 14:22:38'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 14:22:40'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 14:22:41'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 14:22:44'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 14:22:45'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 14:22:47'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 14:22:49'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 14:22:51'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 14:22:55'!
ERROR!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 14:22:55'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'DH 11/17/2019 14:24:20' prior: 50784417!
createInterfaceWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^Interface
	newWithClients: self clientsWithPasswords
	salesBook: aSalesBook
	date: self today
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 14:24:24'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 14:24:24'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 14:24:25'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:24:25'!
FAILURE!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:24:25'!
FAILURE!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 14:24:37'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:24:42'!
FAILURE!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:24:42'!
FAILURE!

----SNAPSHOT----(17 November 2019 14:25:00) CuisUniversity-3938.image priorSource: 14599054!
!Interface class methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 14:35:02'!
newWithClients: aClientDictionary
salesBook: aSalesBook
timeProvider: aTimeProvider
catalog: aCatalog
andMerchantProcessor: aMerchantProcessor

	^ self new
	initializeWith: aClientDictionary
	salesBook: aSalesBook
	timeProvider: aTimeProvider
	catalog: aCatalog
	andMerchantProcessor: aMerchantProcessor! !

!methodRemoval: Interface class #newWithClients:salesBook:date:catalog:andMerchantProcessor: stamp: 'DH 11/17/2019 14:35:20'!
newWithClients: aClientDictionary
salesBook: aSalesBook
date: aTodayDate
catalog: aCatalog
andMerchantProcessor: aMerchantProcessor

	^ self new
	initializeWith: aClientDictionary
	salesBook: aSalesBook
	date: aTodayDate
	catalog: aCatalog
	andMerchantProcessor: aMerchantProcessor!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/17/2019 14:35:46'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook today merchantProcessor timeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'DH 11/17/2019 14:35:44'!
initializeWith: aClientDictionary
salesBook: aSalesBook
timeProvider: aTimeProvider
catalog: aCatalog
andMerchantProcessor: aMerchantProcessor

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.
	salesBook _ aSalesBook.
	timeProvider _ aTimeProvider.
	merchantProcessor _ aMerchantProcessor.! !

!methodRemoval: Interface #initializeWith:salesBook:date:catalog:andMerchantProcessor: stamp: 'DH 11/17/2019 14:35:50'!
initializeWith: aClientDictionary
salesBook: aSalesBook
date: aTodayDate
catalog: aCatalog
andMerchantProcessor: aMerchantProcessor

	clients _ aClientDictionary.
	carts _ Dictionary new.
	lastCartID _ 0.
	catalog _ aCatalog.
	salesBook _ aSalesBook.
	today _ aTodayDate.
	merchantProcessor _ aMerchantProcessor.!

Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook merchantProcessor timeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/17/2019 14:37:23'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook merchantProcessor timeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook timeProvider merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: #TusLibros stamp: 'DH 11/17/2019 14:37:28'!
Object subclass: #Interface
	instanceVariableNames: 'clients carts lastCartID catalog salesBook timeProvider merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 14:37:41' prior: 50787487!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: timeProvider now
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cartInfo cart to: cartInfo ownerID.
	self removeCart: aCartID.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 14:37:55'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 14:37:55'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 14:37:55'!
ERROR!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 14:37:56'!
ERROR!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 14:37:56'!
ERROR!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 14:37:56'!
ERROR!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:37:56'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'DH 11/17/2019 14:38:20' prior: 50788262!
createInterfaceWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^Interface
	newWithClients: self clientsWithPasswords
	salesBook: aSalesBook
	timeProvider: stubTimeProvider
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 14:38:25'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 14:38:25'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 14:38:25'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 14:38:25'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 14:38:25'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 14:38:25'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 14:38:25'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 14:38:25'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 14:38:26'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 14:38:26'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 14:38:26'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 14:38:26'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 14:38:26'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 14:38:26'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 14:38:26'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 14:38:26'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:38:26'!
FAILURE!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:38:26'!
FAILURE!

Object subclass: #CartInfo
	instanceVariableNames: 'cart ownerID lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInfo category: #TusLibros stamp: 'DH 11/17/2019 14:39:02'!
Object subclass: #CartInfo
	instanceVariableNames: 'cart ownerID lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInfo class methodsFor: 'instance creation' stamp: 'DH 11/17/2019 14:39:58'!
for: aCart ownedBy: aClientID createdOn: aDateAndTime

	^self new initializeWithCart: aCart owner: aClientID andDateAndTime: aDateAndTime.! !

!methodRemoval: CartInfo class #for:ownedBy: stamp: 'DH 11/17/2019 14:40:06'!
for: aCart ownedBy: aClientID

	^self new initializeWithCart: aCart andOwner: aClientID!
!CartInfo methodsFor: 'initialization' stamp: 'DH 11/17/2019 14:40:25'!
initializeWithCart: aCart owner: aClientID andDateAndTime: aDateAndTime

	cart _ aCart.
	ownerID _ aClientID! !

!methodRemoval: CartInfo #initializeWithCart:andOwner: stamp: 'DH 11/17/2019 14:40:27'!
initializeWithCart: aCart andOwner: aClientID

	cart _ aCart.
	ownerID _ aClientID!
!CartInfo methodsFor: 'initialization' stamp: 'DH 11/17/2019 14:40:44' prior: 50788617!
initializeWithCart: aCart owner: aClientID andDateAndTime: aDateAndTime

	cart _ aCart.
	ownerID _ aClientID! !
!CartInfo methodsFor: 'initialization' stamp: 'DH 11/17/2019 14:41:03' prior: 50788629!
initializeWithCart: aCart owner: aClientID andDateAndTime: aDateAndTime

	cart _ aCart.
	ownerID _ aClientID.
	lastUsed _ aDateAndTime.! !
!CartInfo methodsFor: 'queries' stamp: 'DH 11/17/2019 14:41:32'!
lastTimeUsed

	^lastUsed! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 14:41:52' prior: 50787449!
createCartWithClientID: aClientID andPassword: aPassword

	self getInfoFromClientWithID: aClientID validatingPassword: aPassword.
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (CartInfo for: (Cart acceptingItemsOf: catalog) ownedBy: aClientID createdOn: timeProvider now).
	^lastCartID! !
!CartInfo methodsFor: 'modifiers' stamp: 'DH 11/17/2019 14:43:14'!
setLastTimeUsed: aDateAndTime

	lastUsed _ aDateAndTime! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 14:44:24' prior: 50787476!
list: aCartID

	|cartInfo cartItemsWithQuantities|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	cartItemsWithQuantities _ Dictionary new.
	self update: cartItemsWithQuantities withItemsFrom: cartInfo cart.
	cartInfo setLastTimeUsed: timeProvider now.
	^cartItemsWithQuantities! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 14:46:36' prior: 50787468!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cartInfo|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	cartInfo cart add: aNumberOfBooks of: aBookISBN.
	cartInfo setLastTimeUsed: timeProvider now.! !

d := DateAndTime now.!

diff := DateAndTime now - d.!
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 14:49:45' prior: 50788664!
list: aCartID

	|cartInfo cartItemsWithQuantities|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	(timeProvider now - cartInfo lastTimeUsed) totalMinutes >= 30 ifTrue: [self error: self class cartNoLongerValidErrorMessage.].
	cartItemsWithQuantities _ Dictionary new.
	self update: cartItemsWithQuantities withItemsFrom: cartInfo cart.
	cartInfo setLastTimeUsed: timeProvider now.
	^cartItemsWithQuantities! !
!Interface class methodsFor: 'errorMessages' stamp: 'DH 11/17/2019 14:50:37'!
cartNoLongerValidErrorMessage

	^'30 minutes or more passed since last time cart was used.'! !
!Interface class methodsFor: 'errorMessages' stamp: 'DH 11/17/2019 14:50:46' prior: 50788703!
cartNoLongerValidErrorMessage

	^'30 minutes or more passed since cart was used.'! !

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:50:58'!
FAILURE!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:50:58'!
FAILURE!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 14:51:06'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:51:07'!
FAILURE!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 14:51:07'!
FAILURE!

----SNAPSHOT----(17 November 2019 14:51:17) CuisUniversity-3938.image priorSource: 14614262!

----QUIT----(17 November 2019 14:51:38) CuisUniversity-3938.image priorSource: 14628278!

----STARTUP---- (17 November 2019 17:41:02) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!


4!

timeProvider now!

interface now!

stubTimeProvider now!

stubTimeProvider now!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 18:13:46' prior: 50787933!
test17CannotListACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 31.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:13:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 18:13:53'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 18:13:54'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:13:54'!
PASSED!
!StubTimeProvider methodsFor: 'time manipulation' stamp: 'DH 11/17/2019 18:14:39' prior: 50788184!
advanceMinutes: anAmountOfMinutes

	dateAndTime _ DateAndTime 
		year: dateAndTime yearNumber
		month: dateAndTime monthIndex
		day: dateAndTime dayOfMonth
		hour: dateAndTime hour
		minute: dateAndTime minute + anAmountOfMinutes
		second: dateAndTime second! !

DateAndTime now second!

d := DateAndTime now!

d !

d nanoSecond !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 18:26:32'!
test18CannotModifyACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:26:35'!
FAILURE!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:26:35'!
FAILURE!
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:27:23' prior: 50788676!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cartInfo|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	(timeProvider now - cartInfo lastTimeUsed) totalMinutes >= 30 ifTrue: [self error: self class cartNoLongerValidErrorMessage.].
	cartInfo cart add: aNumberOfBooks of: aBookISBN.
	cartInfo setLastTimeUsed: timeProvider now.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 18:27:25'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 18:27:25'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 18:27:25'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 18:27:25'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:27:26'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:27:26'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 18:27:39'!
test18CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 18:27:46'!
test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !

!methodRemoval: InterfaceTest #test18CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:27:46'!
test18CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 18:29:07' prior: 50789079!
test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 31.
	
	self should: [interface checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:29:08'!
FAILURE!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:29:09'!
FAILURE!
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:29:31' prior: 50788441!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: timeProvider now
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cartInfo cart to: cartInfo ownerID.
	self removeCart: aCartID.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:29:42' prior: 50788977!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cartInfo|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	cartInfo cart add: aNumberOfBooks of: aBookISBN.
	cartInfo setLastTimeUsed: timeProvider now.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:30:24' prior: 50789170!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	(timeProvider now - cartInfo lastTimeUsed) totalMinutes >= 30 ifTrue: [self error: self class cartNoLongerValidErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: timeProvider now
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cartInfo cart to: cartInfo ownerID.
	self removeCart: aCartID.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 18:30:28'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 18:30:29'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 18:30:29'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 18:30:29'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:30:29'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:30:29'!
FAILURE!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:30:29'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:30:29'!
FAILURE!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:30:38'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:30:40'!
FAILURE!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:30:40'!
FAILURE!
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:31:03' prior: 50789190!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cartInfo|
	cartInfo _ self getInfoFromCartWithID: aCartID.
	(timeProvider now - cartInfo lastTimeUsed) totalMinutes >= 30 ifTrue: [self error: self class cartNoLongerValidErrorMessage.].
	cartInfo cart add: aNumberOfBooks of: aBookISBN.
	cartInfo setLastTimeUsed: timeProvider now.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 18:31:05'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 18:31:05'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 18:31:05'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 18:31:05'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:31:06'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:31:06'!
PASSED!
!Interface methodsFor: 'cart operations - private' stamp: 'DH 11/17/2019 18:33:40'!
a! !

!methodRemoval: Interface #a stamp: 'DH 11/17/2019 18:33:43'!
a!
!Interface methodsFor: 'cart operations - private' stamp: 'DH 11/17/2019 18:34:29' prior: 50787461!
getInfoFromCartWithID: aCartID

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.]! !
!Interface methodsFor: 'cart operations - private' stamp: 'DH 11/17/2019 18:34:51'!
validateAndGetInfoFromCartWithID: aCartID

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 18:34:51' prior: 50788687!
list: aCartID

	|cartInfo cartItemsWithQuantities|
	cartInfo _ self validateAndGetInfoFromCartWithID: aCartID.
	(timeProvider now - cartInfo lastTimeUsed) totalMinutes >= 30 ifTrue: [self error: self class cartNoLongerValidErrorMessage.].
	cartItemsWithQuantities _ Dictionary new.
	self update: cartItemsWithQuantities withItemsFrom: cartInfo cart.
	cartInfo setLastTimeUsed: timeProvider now.
	^cartItemsWithQuantities! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 18:34:51' prior: 50789200!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	cartInfo _ self validateAndGetInfoFromCartWithID: aCartID.
	(timeProvider now - cartInfo lastTimeUsed) totalMinutes >= 30 ifTrue: [self error: self class cartNoLongerValidErrorMessage.].
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: timeProvider now
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cartInfo cart to: cartInfo ownerID.
	self removeCart: aCartID.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 18:34:51' prior: 50789305!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cartInfo|
	cartInfo _ self validateAndGetInfoFromCartWithID: aCartID.
	(timeProvider now - cartInfo lastTimeUsed) totalMinutes >= 30 ifTrue: [self error: self class cartNoLongerValidErrorMessage.].
	cartInfo cart add: aNumberOfBooks of: aBookISBN.
	cartInfo setLastTimeUsed: timeProvider now.! !

!methodRemoval: Interface #getInfoFromCartWithID: stamp: 'DH 11/17/2019 18:34:51'!
getInfoFromCartWithID: aCartID

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.]!
!Interface methodsFor: 'cart operations - private' stamp: 'DH 11/17/2019 18:36:36' prior: 50789398!
validateAndGetInfoFromCartWithID: aCartID

	|cartInfo minutesSinceLastUsed|
	cartInfo _ carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.].
	minutesSinceLastUsed _ (timeProvider now - cartInfo lastTimeUsed) totalMinutes.
	minutesSinceLastUsed >= 30 ifTrue: [self error: self class cartNoLongerValidErrorMessage.].
	^cartInfo! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:37:02' prior: 50789446!
add: aNumberOfBooks of: aBookISBN to: aCartID

	|cartInfo|
	cartInfo _ self validateAndGetInfoFromCartWithID: aCartID.
	cartInfo cart add: aNumberOfBooks of: aBookISBN.
	cartInfo setLastTimeUsed: timeProvider now.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:37:32' prior: 50789422!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	cartInfo _ self validateAndGetInfoFromCartWithID: aCartID.
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: timeProvider now
		registeringOn: salesBook.
	
	cashier checkOut.
	self addItemsFrom: cartInfo cart to: cartInfo ownerID.
	self removeCart: aCartID.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:38:59' prior: 50789405!
list: aCartID

	|cartInfo cartItemsWithQuantities|
	cartInfo _ self validateAndGetInfoFromCartWithID: aCartID.
	cartItemsWithQuantities _ Dictionary new.
	self update: cartItemsWithQuantities withItemsFrom: cartInfo cart.
	cartInfo setLastTimeUsed: timeProvider now.
	^cartItemsWithQuantities! !
!Interface methodsFor: 'client operations - private' stamp: 'DH 11/17/2019 18:41:13'!
registerPurchasesFor: aCart madeWith: aClientID

	|clientPurchases|
	clientPurchases _ (clients at: aClientID) purchases.
	self update: clientPurchases withItemsFrom: aCart.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/17/2019 18:41:13' prior: 50789491!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	cartInfo _ self validateAndGetInfoFromCartWithID: aCartID.
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: timeProvider now
		registeringOn: salesBook.
	
	cashier checkOut.
	self registerPurchasesFor: cartInfo cart madeWith: cartInfo ownerID.
	self removeCart: aCartID.! !

!methodRemoval: Interface #addItemsFrom:to: stamp: 'DH 11/17/2019 18:41:13'!
addItemsFrom: aCart to: aClientID

	|clientPurchases|
	clientPurchases _ (clients at: aClientID) purchases.
	self update: clientPurchases withItemsFrom: aCart.!
!Interface methodsFor: 'client operations - private' stamp: 'DH 11/17/2019 18:41:29' prior: 50789523!
registerPurchasesFor: aClientID madeWith: aCart

	|clientPurchases|
	clientPurchases _ (clients at: aClientID) purchases.
	self update: clientPurchases withItemsFrom: aCart.! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/17/2019 18:41:54' prior: 50789532!
checkout: aCartID withCardNumber: aCardNumber withExpirationDate: aMonth withOwner: anOwner
	
	|cartInfo creditCard cashier|
	cartInfo _ self validateAndGetInfoFromCartWithID: aCartID.
	creditCard _ CreditCard newWithNumber: aCardNumber owner: anOwner  expiringOn: aMonth.
	cashier _ Cashier
		toCheckout: cartInfo cart
		charging: creditCard
		throught: merchantProcessor
		on: timeProvider now
		registeringOn: salesBook.
	
	cashier checkOut.
	self registerPurchasesFor: cartInfo ownerID madeWith: cartInfo cart.
	self removeCart: aCartID.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 18:42:03'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 18:42:03'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 18:42:03'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 18:42:03'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 18:42:03'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 18:42:03'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 18:42:03'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:42:04'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:42:04'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/17/2019 18:43:49' prior: 50789132!
test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|stubTimeProvider client salesBook interface cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.

	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 31.
	
	self should: [interface checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
		self assert: salesBook isEmpty.
	]! !

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:43:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/17/2019 18:43:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:43:57'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:43:58'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/17/2019 18:44:02'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/17/2019 18:44:03'!
PASSED!

----SNAPSHOT----(17 November 2019 18:44:20) CuisUniversity-3938.image priorSource: 14628372!

----QUIT----(17 November 2019 18:44:30) CuisUniversity-3938.image priorSource: 14663033!

----STARTUP---- (18 November 2019 19:40:32) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 19:43:11'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 19:43:12'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 19:43:12'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 19:48:36' prior: 50784060!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface createCartWithClientID: testObjectFactory invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidClientIDErrorMessage equals: anError messageText.
		]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 19:48:49' prior: 50784098!
test02CannotCreateCartWithIncorrectPassword

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface createCartWithClientID: testObjectFactory validClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface incorrectPasswordErrorMessage equals: anError messageText.
		]! !
!InterfaceTest methodsFor: 'utility' stamp: 'DH 11/18/2019 19:54:35'!
createAndCheckoutACartUsing: anInterface

	|client cart book|
	
	client _ testObjectFactory validClientID.
	cart _ anInterface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	anInterface add: 1 of: book to: cart.
	
	anInterface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	^cart! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 19:56:01' prior: 50786917!
test12CheckoutedCartCannotBeModified

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 19:56:17' prior: 50786944!
test13CheckoutedCartCannotBeListed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 19:56:19'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 19:56:20'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 19:56:20'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 19:56:20'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 19:56:20'!
PASSED!
!InterfaceTest methodsFor: 'utility' stamp: 'DH 11/18/2019 20:04:36'!
createAndUseACartUsing: anInterface andAdvanceMinutes: anAmountOfMinutes
	
	|stubTimeProvider client cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	cart _ anInterface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	anInterface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	
	stubTimeProvider advanceMinutes: 31.! !
!InterfaceTest methodsFor: 'utility' stamp: 'DH 11/18/2019 20:05:02' prior: 50790138!
createAndUseACartUsing: anInterface andAdvanceMinutes: anAmountOfMinutes
	
	|stubTimeProvider client cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	cart _ anInterface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	anInterface add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	stubTimeProvider advanceMinutes: anAmountOfMinutes.
	^cart! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:05:58' prior: 50788797!
test17CannotListACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:06:27' prior: 50788943!
test18CannotModifyACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:16:38' prior: 50789656!
test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|salesBook interface cart|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
		self assert: salesBook isEmpty.
	]! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 20:16:47'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 20:16:47'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 20:16:47'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 20:16:47'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 20:16:47'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:16:48'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/18/2019 20:18:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:18:25'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:18:25'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:26:01'!
test19CannotAddBookThatDoesNotBelongToEditorial
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
		
	"
	! !

!methodRemoval: InterfaceTest #test07CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:26:01'!
test07CannotAddBookThatDoesNotBelongToEditorial
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
		
	"
	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:26:12'!
test20CannotAddBookWithQuantityLessThanOne
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
"

	! !

!methodRemoval: InterfaceTest #test08CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:26:12'!
test08CannotAddBookWithQuantityLessThanOne
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
"

	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:26:21'!
test21CannotAddBookWithQuantityLessThanOne
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
"

	! !

!methodRemoval: InterfaceTest #test20CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:26:21'!
test20CannotAddBookWithQuantityLessThanOne
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface cannotAddLessThanOneBookToCartErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	
"

	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:26:27'!
test20CannotAddBookThatDoesNotBelongToEditorial
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
		
	"
	! !

!methodRemoval: InterfaceTest #test19CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:26:27'!
test19CannotAddBookThatDoesNotBelongToEditorial
"
	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].
		
	"
	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:26:39' prior: 50790537!
test20CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface bookNotFromEditorialErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:27:33' prior: 50790581!
test20CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterface.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:27:35'!
ERROR!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:27:35'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:27:48' prior: 50790603!
test20CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory clients at: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:27:49'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:28:02' prior: 50790631!
test20CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:28:04'!
ERROR!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:28:38' prior: 50790657!
test20CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:28:40'!
ERROR!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:28:40'!
ERROR!

!methodRemoval: Cart #invalidItemErrorMessage stamp: 'DH 11/18/2019 20:29:17'!
invalidItemErrorMessage
	
	^'Item is not in catalog'!
!Cart methodsFor: 'assertions' stamp: 'DH 11/18/2019 20:29:32' prior: 50777381!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:29:44' prior: 50777466!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:29:48' prior: 50777510!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:29:53' prior: 50790683!
test20CannotAddBookThatDoesNotBelongToEditorial

	|interface book cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !
!Cart class methodsFor: 'error messages' stamp: 'DH 11/18/2019 20:30:17'!
invalidItemErrorMessage

	^''! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 20:30:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 20:30:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 20:30:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 20:30:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 20:30:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 20:30:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 20:30:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 20:30:23'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 20:30:29'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 20:30:30'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 20:30:30'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 20:30:30'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 20:30:30'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:30:30'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:30:30'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:30:30'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:30:30'!
PASSED!

!testRun: #InterfaceTest #test21CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:30:30'!
PASSED!
!Cart class methodsFor: 'error messages' stamp: 'DH 11/18/2019 20:31:34' prior: 50790773!
invalidItemErrorMessage

	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'DH 11/18/2019 20:32:02' prior: 50777387!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self class invalidQuantityErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:32:07' prior: 50777452!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: Cart #invalidQuantityErrorMessage stamp: 'DH 11/18/2019 20:32:21'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'!
!Cart class methodsFor: 'error messages' stamp: 'DH 11/18/2019 20:32:42'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 20:32:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 20:32:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 20:32:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 20:32:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 20:32:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 20:32:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 20:32:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 20:32:48'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:33:20' prior: 50790494!
test21CannotAddBookWithQuantityLessThanOne

	|interface book cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidQuantityErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	


	! !

!testRun: #InterfaceTest #test21CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:33:24'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:33:26'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:34:21' prior: 50790751!
test20CannotAddBookThatDoesNotBelongToEditorial

	"Test adicional. No se hace en el marco de TDD."
	|interface book cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemNotSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 1 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:34:32' prior: 50790930!
test21CannotAddBookWithQuantityLessThanOne

	"Test adicional. No se hace en el marco de TDD."
	|interface book cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 0 of: book to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidQuantityErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	


	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:35:12' prior: 50790959!
test20CannotAddBookThatDoesNotBelongToEditorial

	"Test adicional. No se hace en el marco de TDD."
	|interface cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 1 of: testObjectFactory itemNotSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:35:25' prior: 50790983!
test21CannotAddBookWithQuantityLessThanOne

	"Test adicional. No se hace en el marco de TDD."
	|interface cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 0 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidQuantityErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	


	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 20:35:50'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 20:35:50'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 20:35:50'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 20:35:50'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 20:35:50'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 20:35:50'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 20:35:50'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 20:35:50'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #InterfaceTest #test21CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:35:51'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/18/2019 20:35:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

!testRun: #InterfaceTest #test21CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:35:55'!
PASSED!

----SNAPSHOT----(18 November 2019 20:36:00) CuisUniversity-3938.image priorSource: 14663127!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:52:20'!
test07ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	self assert: (Dictionary new at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart).


	! !

!methodRemoval: InterfaceTest #test09ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 20:52:20'!
test09ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	self assert: (Dictionary new at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart).


	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:52:27'!
test8CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].	
	
	! !

!methodRemoval: InterfaceTest #test10CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 20:52:27'!
test10CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].	
	
	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:52:35'!
test08CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].	
	
	! !

!methodRemoval: InterfaceTest #test8CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 20:52:35'!
test8CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].	
	
	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:52:41'!
test09CheckoutOfValidCartMakesTheSaleWithCorrectCost

	|interface client cart book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !

!methodRemoval: InterfaceTest #test11CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 20:52:41'!
test11CheckoutOfValidCartMakesTheSaleWithCorrectCost

	|interface client cart book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:52:46'!
test10CheckoutedCartCannotBeModified

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !

!methodRemoval: InterfaceTest #test12CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 20:52:46'!
test12CheckoutedCartCannotBeModified

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:52:49'!
test11CheckoutedCartCannotBeListed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].! !

!methodRemoval: InterfaceTest #test13CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 20:52:49'!
test13CheckoutedCartCannotBeListed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: Interface invalidCartIDErrorMessage equals: anError messageText.
	].!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:52:54'!
test12CannotListPurchasesOfNonExistentClient

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory invalidClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidClientIDErrorMessage equals: anError messageText.
	]! !

!methodRemoval: InterfaceTest #test14CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 20:52:54'!
test14CannotListPurchasesOfNonExistentClient

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory invalidClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface invalidClientIDErrorMessage equals: anError messageText.
	]!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:52:58'!
test13CannotListPurchasesOfClientUsingWrongPassword

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory validClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface incorrectPasswordErrorMessage equals: anError messageText.
	]! !

!methodRemoval: InterfaceTest #test15CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 20:52:58'!
test15CannotListPurchasesOfClientUsingWrongPassword

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory validClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: Interface incorrectPasswordErrorMessage equals: anError messageText.
	]!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:53:02'!
test14ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).! !

!methodRemoval: InterfaceTest #test16ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 20:53:02'!
test16ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:53:07'!
test15CannotListACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !

!methodRemoval: InterfaceTest #test17CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:53:07'!
test17CannotListACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:53:12'!
test16CannotModifyACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]! !

!methodRemoval: InterfaceTest #test18CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:53:12'!
test18CannotModifyACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
	]!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 20:53:17'!
test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|salesBook interface cart|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
		self assert: salesBook isEmpty.
	]! !

!methodRemoval: InterfaceTest #test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:53:17'!
test19CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|salesBook interface cart|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
		self assert: salesBook isEmpty.
	]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 20:53:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 20:53:25'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #InterfaceTest #test21CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 20:53:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 21:12:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 21:12:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 21:12:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 21:12:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 21:12:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 21:12:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 21:12:10'!
PASSED!

!testRun: #InterfaceTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 21:12:11'!
PASSED!

!testRun: #InterfaceTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 21:12:11'!
PASSED!

!testRun: #InterfaceTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 21:12:11'!
PASSED!

!testRun: #InterfaceTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 21:12:11'!
PASSED!

!testRun: #InterfaceTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 21:12:11'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 21:12:11'!
PASSED!

!testRun: #InterfaceTest #test21CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 21:12:11'!
PASSED!

----SNAPSHOT----(18 November 2019 21:12:14) CuisUniversity-3938.image priorSource: 14706563!

----QUIT----(18 November 2019 21:12:24) CuisUniversity-3938.image priorSource: 14729510!

----STARTUP---- (18 November 2019 21:51:03) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!

!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 21:54:30'!
test18CartNotUsedFor30MinutesIsDeleted

	|salesBook interface cart|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: Interface cartNoLongerValidErrorMessage equals: anError messageText.
		self assert: salesBook isEmpty.
	]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 21:58:29' prior: 50791957!
test18CartNotUsedFor30MinutesIsDeleted

	| interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self should: [interface list: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:aSecondError |
			self assert: Interface invalidCartIDErrorMessage equals: aSecondError messageText.
		]
	]! !
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 21:58:34' prior: 50791981!
test18CartNotUsedFor30MinutesIsDeleted

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self should: [interface list: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:aSecondError |
			self assert: Interface invalidCartIDErrorMessage equals: aSecondError messageText.
		]
	]! !

!testRun: #InterfaceTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/18/2019 21:58:38'!
FAILURE!

!testRun: #InterfaceTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/18/2019 21:58:38'!
FAILURE!
!Interface methodsFor: 'cart operations - private' stamp: 'DH 11/18/2019 21:59:23' prior: 50789467!
validateAndGetInfoFromCartWithID: aCartID

	|cartInfo minutesSinceLastUsed|
	cartInfo _ carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorMessage.].
	minutesSinceLastUsed _ (timeProvider now - cartInfo lastTimeUsed) totalMinutes.
	minutesSinceLastUsed >= 30 ifTrue: [
		self removeCart: aCartID.
		self error: self class cartNoLongerValidErrorMessage.
	].
	^cartInfo! !

!testRun: #InterfaceTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/18/2019 21:59:40'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/18/2019 21:59:44'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 21:59:45'!
PASSED!

!testRun: #InterfaceTest #test21CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 21:59:45'!
PASSED!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 21:59:57'!
test19CannotAddBookThatDoesNotBelongToEditorial

	"Test adicional. No se hace en el marco de TDD."
	|interface cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 1 of: testObjectFactory itemNotSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !

!methodRemoval: InterfaceTest #test20CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 21:59:58'!
test20CannotAddBookThatDoesNotBelongToEditorial

	"Test adicional. No se hace en el marco de TDD."
	|interface cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 1 of: testObjectFactory itemNotSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	!
!InterfaceTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:00:05'!
test20CannotAddBookWithQuantityLessThanOne

	"Test adicional. No se hace en el marco de TDD."
	|interface cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 0 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidQuantityErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	


	! !

!methodRemoval: InterfaceTest #test21CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 22:00:05'!
test21CannotAddBookWithQuantityLessThanOne

	"Test adicional. No se hace en el marco de TDD."
	|interface cart client|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 0 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidQuantityErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	


	!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:02:34' prior: 50786718!
clientsWithPasswords

	|clients|
	clients _ Dictionary new.
	clients at: self validClientID put: (ClientStoreEntry forClientWithPassword: 'flan').
	clients at: self anotherValidClientID put: (ClientStoreEntry forClientWithPassword: 'rosebud').
	^clients! !
!Interface methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:03:20' prior: 50788647!
createCartWithClientID: aClientID andPassword: aPassword

	self getInfoFromClientWithID: aClientID validatingPassword: aPassword.
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (CartStoreEntry for: (Cart acceptingItemsOf: catalog) ownedBy: aClientID createdOn: timeProvider now).
	^lastCartID! !
!Interface methodsFor: 'utility - private' stamp: 'DH 11/18/2019 22:05:50'!
cartStoreEntryForNewCartWithOwner: aClientID

	^CartStoreEntry for: (Cart acceptingItemsOf: catalog) ownedBy: aClientID createdOn: timeProvider now ! !
!Interface methodsFor: 'cart operations' stamp: 'DH 11/18/2019 22:06:36' prior: 50792219!
createCartWithClientID: aClientID andPassword: aPassword

	self getInfoFromClientWithID: aClientID validatingPassword: aPassword.
	lastCartID _ lastCartID + 1.
	carts at: lastCartID put: (self cartStoreEntryForNewCartWithOwner: aClientID).
	^lastCartID! !
!Interface methodsFor: 'utility - private' stamp: 'DH 11/18/2019 22:06:52' prior: 50792231!
cartStoreEntryForNewCartWithOwner: aClientID

	^CartStoreEntry for: (Cart acceptingItemsOf: catalog) ownedBy: aClientID createdOn: timeProvider now! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 22:07:20'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 22:07:20'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test19CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 22:07:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #InterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #InterfaceTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #InterfaceTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 22:07:27'!
PASSED!

!testRun: #InterfaceTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test19CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

!testRun: #InterfaceTest #test20CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 22:07:28'!
PASSED!

----SNAPSHOT----(18 November 2019 22:07:33) CuisUniversity-3938.image priorSource: 14729604!

----QUIT----(18 November 2019 22:07:41) CuisUniversity-3938.image priorSource: 14745333!

----STARTUP---- (18 November 2019 22:42:23) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!

!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50784580!
test04CannotAddBookToNonExistentCart

	|interface book|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	
	self should: [interface add: 1 of: book to: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText
	].
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50792000!
test18CartNotUsedFor30MinutesIsDeleted

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self should: [interface list: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:aSecondError |
			self assert: PurchaseSystem invalidCartIDErrorMessage equals: aSecondError messageText.
		]
	]! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50788519!
createInterfaceWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^PurchaseSystem
	newWithClients: self clientsWithPasswords
	salesBook: aSalesBook
	timeProvider: stubTimeProvider
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50791497!
test13CannotListPurchasesOfClientUsingWrongPassword

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory validClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem incorrectPasswordErrorMessage equals: anError messageText.
	]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50791675!
test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|salesBook interface cart|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createInterfaceWithSalesBook: salesBook andMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
		self assert: salesBook isEmpty.
	]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50791467!
test12CannotListPurchasesOfNonExistentClient

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory invalidClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidClientIDErrorMessage equals: anError messageText.
	]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50791406!
test10CheckoutedCartCannotBeModified

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50790007!
test02CannotCreateCartWithIncorrectPassword

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface createCartWithClientID: testObjectFactory validClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem incorrectPasswordErrorMessage equals: anError messageText.
		]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50791607!
test15CannotListACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
	]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50789992!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	self should: [interface createCartWithClientID: testObjectFactory invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidClientIDErrorMessage equals: anError messageText.
		]! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50791314!
test08CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].	
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:37' prior: 50791438!
test11CheckoutedCartCannotBeListed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:38' prior: 50784636!
test05CannotListANonExistentCart

	|interface|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	
	self should: [interface list: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText
		].
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:42:38' prior: 50791639!
test16CannotModifyACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createInterfaceWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
	]! !
!StoreTestObjectsFactory methodsFor: 'purchase system' stamp: 'DH 11/18/2019 22:44:51'!
createPurchaseSystemWithMerchantProcessor: aMerchantProcessor
		
	^self createInterfaceWithSalesBook: OrderedCollection new andMerchantProcessor: aMerchantProcessor! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792660!
test05CannotListANonExistentCart

	|interface|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	
	self should: [interface list: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText
		].
	! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792608!
test01CannotCreateCartWithInvalidClientID

	|interface|
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	self should: [interface createCartWithClientID: testObjectFactory invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidClientIDErrorMessage equals: anError messageText.
		]! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50786755!
test03IDsOfTwoCreatedCartsAreDifferent

	|interface clientID1 clientID2 cartID1 cartID2|
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	cartID1 _ interface createCartWithClientID: clientID1 andPassword: (testObjectFactory passwordFor: clientID1).
	cartID2 _ interface createCartWithClientID: clientID2 andPassword: (testObjectFactory passwordFor: clientID2).
	
	self deny: cartID1 = cartID2.
	! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792575!
test02CannotCreateCartWithIncorrectPassword

	|interface|
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	self should: [interface createCartWithClientID: testObjectFactory validClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem incorrectPasswordErrorMessage equals: anError messageText.
		]! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792452!
test04CannotAddBookToNonExistentCart

	|interface book|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	
	self should: [interface add: 1 of: book to: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText
	].
	! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792501!
test13CannotListPurchasesOfClientUsingWrongPassword

	|interface|
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory validClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem incorrectPasswordErrorMessage equals: anError messageText.
	]! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50791528!
test14ListingPurchasesOfClientShowsAllPurchases

	|interface book1 book2 client password cart cardNumber expirationDate owner|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 1 of: book1 to: cart.
	interface add: 1 of: book2 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ interface createCartWithClientID: client andPassword: password.
	interface add: 2 of: book1 to: cart.
	interface checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (interface listPurchasesOf: client withPassword: password).! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792469!
test18CartNotUsedFor30MinutesIsDeleted

	|interface cart|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self should: [interface list: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:aSecondError |
			self assert: PurchaseSystem invalidCartIDErrorMessage equals: aSecondError messageText.
		]
	]! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50791234!
test07ListingACartShowsAddedBooks

	|interface book1 book2 client cart|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	interface add: 1 of: book1 to: cart.
	interface add: 2 of: book2 to: cart.
	self assert: (Dictionary new at: book1 put: 1; at: book2 put: 2; yourself) equals: (interface list: cart).


	! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792591!
test15CannotListACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
	]! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792624!
test08CannotCheckoutANonExistentCart

	|interface|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.

	self should: [interface checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].	
	
	! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:51' prior: 50792161!
test20CannotAddBookWithQuantityLessThanOne

	"Test adicional. No se hace en el marco de TDD."
	|interface cart client|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 0 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidQuantityErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].	


	! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:52' prior: 50786775!
test06ListingAnEmptyCartResultsInEmptyList

	|interface client cart|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self assert: (interface list: cart) isEmpty
	! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:52' prior: 50792115!
test19CannotAddBookThatDoesNotBelongToEditorial

	"Test adicional. No se hace en el marco de TDD."
	|interface cart client|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [interface add: 1 of: testObjectFactory itemNotSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (interface list: cart) isEmpty.
		].

	! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:52' prior: 50792542!
test12CannotListPurchasesOfNonExistentClient

	|interface|
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	self should: [interface listPurchasesOf: testObjectFactory invalidClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidClientIDErrorMessage equals: anError messageText.
	]! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:52' prior: 50792558!
test10CheckoutedCartCannotBeModified

	|interface cart|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface add: 1 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:52' prior: 50792644!
test11CheckoutedCartCannotBeListed

	|interface cart|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: interface.
	
	self should: [interface list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:44:52' prior: 50792675!
test16CannotModifyACartIf30MinutesPassedSinceLastUsed

	|interface cart|
	
	interface _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
	]! !

!methodRemoval: StoreTestObjectsFactory #createInterfaceWithMerchantProcessor: stamp: 'DH 11/18/2019 22:44:52'!
createInterfaceWithMerchantProcessor: aMerchantProcessor
		
	^self createInterfaceWithSalesBook: OrderedCollection new andMerchantProcessor: aMerchantProcessor!
!StoreTestObjectsFactory methodsFor: 'purchase system' stamp: 'DH 11/18/2019 22:45:09'!
createPurchaseSystemWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^PurchaseSystem
	newWithClients: self clientsWithPasswords
	salesBook: aSalesBook
	timeProvider: stubTimeProvider
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor ! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:45:09' prior: 50792517!
test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|salesBook interface cart|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createPurchaseSystemWithSalesBook: salesBook andMerchantProcessor: self.
	cart _ self createAndUseACartUsing: interface andAdvanceMinutes: 31.
	
	self should: [interface checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
		self assert: salesBook isEmpty.
	]! !
!PurchaseSystemTest methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:45:10' prior: 50791352!
test09CheckoutOfValidCartMakesTheSaleWithCorrectCost

	|interface client cart book salesBook|
	
	salesBook _ OrderedCollection new.
	interface _ testObjectFactory createPurchaseSystemWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ interface createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	interface add: 1 of: book to: cart.
	
	interface checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DH 11/18/2019 22:45:10' prior: 50792693!
createPurchaseSystemWithMerchantProcessor: aMerchantProcessor
		
	^self createPurchaseSystemWithSalesBook: OrderedCollection new andMerchantProcessor: aMerchantProcessor! !

!methodRemoval: StoreTestObjectsFactory #createInterfaceWithSalesBook:andMerchantProcessor: stamp: 'DH 11/18/2019 22:45:10'!
createInterfaceWithSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor
		
	^PurchaseSystem
	newWithClients: self clientsWithPasswords
	salesBook: aSalesBook
	timeProvider: stubTimeProvider
	catalog: self defaultCatalog
	andMerchantProcessor: aMerchantProcessor !
!PurchaseSystemTest methodsFor: 'utility' stamp: 'DH 11/18/2019 22:45:37' prior: 50790022!
createAndCheckoutACartUsing: aPurchaseSystem

	|client cart book|
	
	client _ testObjectFactory validClientID.
	cart _ aPurchaseSystem createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	aPurchaseSystem add: 1 of: book to: cart.
	
	aPurchaseSystem checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	^cart! !
!PurchaseSystemTest methodsFor: 'utility' stamp: 'DH 11/18/2019 22:45:45' prior: 50790155!
createAndUseACartUsing: aPurchaseSystem andAdvanceMinutes: anAmountOfMinutes
	
	|stubTimeProvider client cart|
	
	stubTimeProvider _ testObjectFactory stubTimeProvider.
	client _ testObjectFactory validClientID.
	cart _ aPurchaseSystem createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	aPurchaseSystem add: 1 of: testObjectFactory itemSellByTheStore to: cart.
	stubTimeProvider advanceMinutes: anAmountOfMinutes.
	^cart! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:46:04' prior: 50792717!
test01CannotCreateCartWithInvalidClientID

	|purchaseSystem|
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	self should: [purchaseSystem createCartWithClientID: testObjectFactory invalidClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidClientIDErrorMessage equals: anError messageText.
		]! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:46:12' prior: 50792753!
test02CannotCreateCartWithIncorrectPassword

	|purchaseSystem|
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	self should: [purchaseSystem createCartWithClientID: testObjectFactory validClientID andPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem incorrectPasswordErrorMessage equals: anError messageText.
		]! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:46:20' prior: 50792733!
test03IDsOfTwoCreatedCartsAreDifferent

	|purchaseSystem clientID1 clientID2 cartID1 cartID2|
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	clientID1 _ testObjectFactory validClientID.
	clientID2 _ testObjectFactory anotherValidClientID.
	cartID1 _ purchaseSystem createCartWithClientID: clientID1 andPassword: (testObjectFactory passwordFor: clientID1).
	cartID2 _ purchaseSystem createCartWithClientID: clientID2 andPassword: (testObjectFactory passwordFor: clientID2).
	
	self deny: cartID1 = cartID2.
	! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:46:32' prior: 50792769!
test04CannotAddBookToNonExistentCart

	|purchaseSystem book|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	book _ testObjectFactory itemSellByTheStore.
	
	self should: [purchaseSystem add: 1 of: book to: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText
	].
	! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:46:38' prior: 50792702!
test05CannotListANonExistentCart

	|purchaseSystem|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	
	self should: [purchaseSystem list: testObjectFactory invalidCartID.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText
		].
	! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:46:46' prior: 50792945!
test06ListingAnEmptyCartResultsInEmptyList

	|purchaseSystem client cart|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ purchaseSystem createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self assert: (purchaseSystem list: cart) isEmpty
	! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:46:58' prior: 50792862!
test07ListingACartShowsAddedBooks

	|purchaseSystem book1 book2 client cart|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	cart _ purchaseSystem createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	purchaseSystem add: 1 of: book1 to: cart.
	purchaseSystem add: 2 of: book2 to: cart.
	self assert: (Dictionary new at: book1 put: 1; at: book2 put: 2; yourself) equals: (purchaseSystem list: cart).


	! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:47:06' prior: 50792901!
test08CannotCheckoutANonExistentCart

	|purchaseSystem|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.

	self should: [purchaseSystem checkout: testObjectFactory invalidCartID 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].	
	
	! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:47:16' prior: 50793097!
test09CheckoutOfValidCartMakesTheSaleWithCorrectCost

	|purchaseSystem client cart book salesBook|
	
	salesBook _ OrderedCollection new.
	purchaseSystem _ testObjectFactory createPurchaseSystemWithSalesBook: salesBook andMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ purchaseSystem createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	book _ testObjectFactory itemSellByTheStore.
	purchaseSystem add: 1 of: book to: cart.
	
	purchaseSystem checkout: cart
		withCardNumber: testObjectFactory validCreditCardNumber
	 	withExpirationDate:  testObjectFactory futureDate
		withOwner: testObjectFactory validOwner.
	
	self assert: (OrderedCollection with: (Sale of: testObjectFactory itemSellByTheStorePrice)) equals: salesBook.! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:47:23' prior: 50793000!
test10CheckoutedCartCannotBeModified

	|purchaseSystem cart|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: purchaseSystem.
	
	self should: [purchaseSystem add: 1 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:47:30' prior: 50793017!
test11CheckoutedCartCannotBeListed

	|purchaseSystem cart|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndCheckoutACartUsing: purchaseSystem.
	
	self should: [purchaseSystem list: cart.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: PurchaseSystem invalidCartIDErrorMessage equals: anError messageText.
	].! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:47:39' prior: 50792984!
test12CannotListPurchasesOfNonExistentClient

	|purchaseSystem|
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	self should: [purchaseSystem listPurchasesOf: testObjectFactory invalidClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem invalidClientIDErrorMessage equals: anError messageText.
	]! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:47:44' prior: 50792786!
test13CannotListPurchasesOfClientUsingWrongPassword

	|purchaseSystem|
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	self should: [purchaseSystem listPurchasesOf: testObjectFactory validClientID withPassword: 'pepito'.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError | 
		self assert: PurchaseSystem incorrectPasswordErrorMessage equals: anError messageText.
	]! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:47:59' prior: 50792802!
test14ListingPurchasesOfClientShowsAllPurchases

	|purchaseSystem book1 book2 client password cart cardNumber expirationDate owner|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	book1 _ testObjectFactory itemSellByTheStore.
	book2 _ testObjectFactory anotherItemSellByTheStore.
	client _ testObjectFactory validClientID.
	password _ testObjectFactory passwordFor: client.
	cardNumber _ testObjectFactory validCreditCardNumber.
	expirationDate _ testObjectFactory futureDate.
	owner _ testObjectFactory validOwner.
	
	cart _ purchaseSystem createCartWithClientID: client andPassword: password.
	purchaseSystem add: 1 of: book1 to: cart.
	purchaseSystem add: 1 of: book2 to: cart.
	purchaseSystem checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	cart _ purchaseSystem createCartWithClientID: client andPassword: password.
	purchaseSystem add: 2 of: book1 to: cart.
	purchaseSystem checkout: cart withCardNumber: cardNumber withExpirationDate: expirationDate withOwner: owner.
	
	self assert: (Dictionary new at: book1 put: 3; at: book2 put: 1; yourself)
		equals: (purchaseSystem listPurchasesOf: client withPassword: password).! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:48:07' prior: 50792884!
test15CannotListACartIf30MinutesPassedSinceLastUsed

	|purchaseSystem cart|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: purchaseSystem andAdvanceMinutes: 31.
	
	self should: [purchaseSystem list: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
	]! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:48:15' prior: 50793033!
test16CannotModifyACartIf30MinutesPassedSinceLastUsed

	|purchaseSystem cart|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: purchaseSystem andAdvanceMinutes: 31.
	
	self should: [purchaseSystem add: 2 of: testObjectFactory anotherItemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
	]! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:48:25' prior: 50793072!
test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed

	|salesBook purchaseSystem cart|
	
	salesBook _ OrderedCollection new.
	purchaseSystem _ testObjectFactory createPurchaseSystemWithSalesBook: salesBook andMerchantProcessor: self.
	cart _ self createAndUseACartUsing: purchaseSystem andAdvanceMinutes: 31.
	
	self should: [purchaseSystem checkout: cart 
		withCardNumber: testObjectFactory validCreditCardNumber 
		withExpirationDate: testObjectFactory futureDate 
		withOwner: testObjectFactory validOwner
	]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: PurchaseSystem cartNoLongerValidErrorMessage equals: anError messageText.
		self assert: salesBook isEmpty.
	]! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:48:34' prior: 50792842!
test18CartNotUsedFor30MinutesIsDeleted

	|purchaseSystem cart|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	cart _ self createAndUseACartUsing: purchaseSystem andAdvanceMinutes: 31.
	
	self should: [purchaseSystem list: cart]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self should: [purchaseSystem list: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:aSecondError |
			self assert: PurchaseSystem invalidCartIDErrorMessage equals: aSecondError messageText.
		]
	]! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:48:41' prior: 50792960!
test19CannotAddBookThatDoesNotBelongToEditorial

	"Test adicional. No se hace en el marco de TDD."
	|purchaseSystem cart client|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ purchaseSystem createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [purchaseSystem add: 1 of: testObjectFactory itemNotSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidItemErrorMessage equals: anError messageText.
		self assert: (purchaseSystem list: cart) isEmpty.
		].

	! !
!PurchaseSystemTest methodsFor: 'tests' stamp: 'DH 11/18/2019 22:48:51' prior: 50792921!
test20CannotAddBookWithQuantityLessThanOne

	"Test adicional. No se hace en el marco de TDD."
	|purchaseSystem cart client|
	
	purchaseSystem _ testObjectFactory createPurchaseSystemWithMerchantProcessor: self.
	client _ testObjectFactory validClientID.
	cart _ purchaseSystem createCartWithClientID: client andPassword: (testObjectFactory passwordFor: client).
	
	self should: [purchaseSystem add: 0 of: testObjectFactory itemSellByTheStore to: cart.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError | 
		self assert: Cart invalidQuantityErrorMessage equals: anError messageText.
		self assert: (purchaseSystem list: cart) isEmpty.
		].	


	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/18/2019 22:49:04'!
PASSED!

!testRun: #PurchaseSystemTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test19CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #PurchaseSystemTest #test20CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 22:49:05'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #PurchaseSystemTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #PurchaseSystemTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #PurchaseSystemTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/18/2019 22:49:09'!
PASSED!

!testRun: #PurchaseSystemTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test05CannotListANonExistentCart stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test19CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

!testRun: #PurchaseSystemTest #test20CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/18/2019 22:49:10'!
PASSED!

----SNAPSHOT----(18 November 2019 22:49:15) CuisUniversity-3938.image priorSource: 14745427!

----QUIT----(18 November 2019 22:49:25) CuisUniversity-3938.image priorSource: 14789680!

----STARTUP---- (19 November 2019 18:24:32) as D:\DAMIAN\Facultad\Inge1\windows64\CuisUniversity-3938.image!


----End fileIn of D:\DAMIAN\Facultad\Inge1\windows64\Packages\System\Collections-CompactArrays.pck.st----!

----End fileIn of D:\DAMIAN\Facultad\Inge1\windows64\Packages\Features\Compression.pck.st----!

----End fileIn of D:\DAMIAN\Facultad\Inge1\windows64\Packages\Features\Sound.pck.st----!

----End fileIn of D:\DAMIAN\Facultad\Inge1\windows64\Packages\Features\Cryptography-DigitalSignatures.pck.st----!

----End fileIn of D:\DAMIAN\Facultad\Inge1\windows64\Packages\Features\Identities-UUID.pck.st----!

----End fileIn of D:\DAMIAN\Facultad\Inge1\windows64\Packages\System\Network-Kernel.pck.st----!

----End fileIn of D:\DAMIAN\Facultad\Inge1\windows64\Packages\Features\WebClient.pck.st----!

----End fileIn of D:\DAMIAN\Facultad\Inge1\windows64\StringServer.st----!

----SNAPSHOT----(19 November 2019 18:43:07) CuisUniversity-3938.image priorSource: 14789774!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #PurchaseSystemTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/19/2019 18:43:11'!
PASSED!

!testRun: #PurchaseSystemTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test05CannotListANonExistentCart stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test19CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

!testRun: #PurchaseSystemTest #test20CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/19/2019 18:43:12'!
PASSED!

Object subclass: #TusLibrosServerController
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosServerController category: #TusLibros stamp: 'DH 11/19/2019 18:46:45'!
Object subclass: #TusLibrosServerController
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosServerController category: #TusLibros stamp: 'DH 11/19/2019 18:48:01'!
Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosServerController class methodsFor: 'instance creation' stamp: 'DH 11/19/2019 18:48:21'!
listeningOn: aPortNumber! !
!TusLibrosServerController class methodsFor: 'instance creation' stamp: 'DH 11/19/2019 18:48:47' prior: 50832278!
listeningOn: aPortNumber

	^self new initializeWith: aPortNumber! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'DH 11/19/2019 18:49:05'!
initializeWith: aPortNumber! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'DH 11/19/2019 18:53:07' prior: 50832288!
initializeWith: aPortNumber

	|hiList stringGenius|
	hiList := self hiList.
	
	stringGenius := StringGenius new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		
		[sentence := (request fields at:'sentence').
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !

Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port purchaseSystem timeProvider clients catalog  merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosServerController category: #TusLibros stamp: 'DH 11/19/2019 18:54:53'!
Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port purchaseSystem timeProvider clients catalog merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port purchaseSystem timeProvider clients catalog salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosServerController category: #TusLibros stamp: 'DH 11/19/2019 18:55:32'!
Object subclass: #TusLibrosServerController
	instanceVariableNames: 'webServer port purchaseSystem timeProvider clients catalog salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RealTimeProvider category: #TusLibros stamp: 'DH 11/19/2019 18:57:20'!
TimeProvider subclass: #RealTimeProvider
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosServerController methodsFor: 'initialization' stamp: 'DH 11/19/2019 18:57:06' prior: 50832293!
initializeWith: aPortNumber

	| stringGenius |
	timeProvider _ RealTimeProvider new.
	catalog _ self catalog.
	salesBook _ OrderedCollection new.
	"merchantProcessor _ MerchantProcessor new."
	
	
	stringGenius := StringGenius new.
	
	port:= aPortNumber.
	
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		
		[sentence := (request fields at:'sentence').
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'DH 11/19/2019 18:58:08' prior: 50832423!
initializeWith: aPortNumber

	| stringGenius |
	timeProvider _ RealTimeProvider new.
	catalog _ self catalog.
	salesBook _ OrderedCollection new.
	"merchantProcessor _ MerchantProcessor new."
	

	port:= aPortNumber.
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		
		[sentence := (request fields at:'sentence').
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'DH 11/19/2019 18:58:41' prior: 50832515!
initializeWith: aPortNumber

	| stringGenius |
	timeProvider _ RealTimeProvider new.
	clients _ self clients.
	catalog _ self catalog.
	salesBook _ OrderedCollection new.
	"merchantProcessor _ MerchantProcessor new."
	

	port:= aPortNumber.
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		
		[sentence := (request fields at:'sentence').
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'DH 11/19/2019 19:00:46' prior: 50832606!
initializeWith: aPortNumber

	| stringGenius |
	stringGenius _ 2.
	
	timeProvider _ RealTimeProvider new.
	clients _ self clients.
	catalog _ self catalog.
	salesBook _ OrderedCollection new.
	"merchantProcessor _ MerchantProcessor new."
	purchaseSystem _ PurchaseSystem
		newWithClients: clients
		salesBook: salesBook
		timeProvider: timeProvider
		catalog: catalog
		andMerchantProcessor: merchantProcessor.
	

	port _ aPortNumber.
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		
		[sentence := (request fields at:'sentence').
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !
!RealTimeProvider methodsFor: 'query time' stamp: 'DH 11/19/2019 19:01:50'!
now

	^DateAndTime now! !
!TusLibrosServerController methodsFor: 'private' stamp: 'DH 11/19/2019 19:03:55'!
clients

	^Dictionary new at: 1 put: 'flan'; at: 2 put: 'rosebud'; yourself! !
!TusLibrosServerController methodsFor: 'private' stamp: 'DH 11/19/2019 19:04:48'!
catalog

	^Dictionary new at: 'validBook1' put: 20; at: 'validBook2' put: 40; yourself! !
!TusLibrosServerController methodsFor: 'private' stamp: 'DH 11/19/2019 19:08:49'!
debit: anAmount from: aCreditCard

	! !
!TusLibrosServerController methodsFor: 'initialization' stamp: 'DH 11/19/2019 19:09:04' prior: 50832698!
initializeWith: aPortNumber

	| stringGenius |
	stringGenius _ 2.
	
	timeProvider _ RealTimeProvider new.
	clients _ self clients.
	catalog _ self catalog.
	salesBook _ OrderedCollection new.
	merchantProcessor _ self.
	purchaseSystem _ PurchaseSystem
		newWithClients: clients
		salesBook: salesBook
		timeProvider: timeProvider
		catalog: catalog
		andMerchantProcessor: merchantProcessor.
	

	port _ aPortNumber.
	webServer := WebServer new listenOn: aPortNumber.
	
	webServer addService: '/sayHi' action:[:request |	
		
		"request send200Response: (self sayRandomHi)"
		request send200Response: (self sayRandomHi asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		].
	
	webServer addService: '/substrings' action:[:request | |substringsAsJson sentence substrings |
		
		[sentence := (request fields at:'sentence').
		substrings := stringGenius substrings: sentence.
		substringsAsJson:= WebUtils jsonEncode: (substrings).
		"request send200Response: (substringsAsJson)"
		request send200Response: (substringsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/firstLetter' action:[:request | |letterAsJson word letter |
		
		[word := (request fields at:'word').
		letter := stringGenius firstLetter: word.
		letterAsJson:= WebUtils jsonEncode: (letter asString).
		"request send200Response: (letterAsJson)"
		request send200Response: (letterAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/vowels' action:[:request | |vowelsAsJson word vowels |
		
		[word := (request fields at:'word').
		vowels := stringGenius vowels: word.
		vowelsAsJson:= WebUtils jsonEncode: (vowels).
		"request send200Response: (vowelsAsJson)"
		request send200Response: (vowelsAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
	webServer addService: '/toUppercase' action:[:request | |upperCasedWordAsJson word upperCasedWord |
		
		[word := (request fields at:'word').
		upperCasedWord := stringGenius toUppercase: word.
		upperCasedWordAsJson:= WebUtils jsonEncode: (upperCasedWord).
		"request send200Response: (upperCasedWordAsJson)"
		request send200Response: (upperCasedWordAsJson asUtf8) 
				 contentType: 'application/json; charset=utf-8' do: [:resp | 
					resp headerAt: 'Access-Control-Allow-Origin' put: '*'.]
		 ] 
		on: Error 
		do: [ :anError |
			request send404Response: (anError messageText) ]].
	
! !

server _ StringServerController listeningOn: 8082!

server stopListening!

'ha a' substrings!

'ha a' substrings class!

WebUtils jsonEncode: (Array with: 'hola' with: 'chau')!

WebUtils jsonEncode: (Array with: (Array with: 'hola') with: 'chau')!

WebUtils jsonEncode: (Dictionary new at: 'response' put: 'error'; yourself)!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DH 11/19/2019 19:43:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DH 11/19/2019 19:43:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test01CannotCreateCartWithInvalidClientID stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test02CannotCreateCartWithIncorrectPassword stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test03IDsOfTwoCreatedCartsAreDifferent stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test04CannotAddBookToNonExistentCart stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test05CannotListANonExistentCart stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test06ListingAnEmptyCartResultsInEmptyList stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test07ListingACartShowsAddedBooks stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test08CannotCheckoutANonExistentCart stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test09CheckoutOfValidCartMakesTheSaleWithCorrectCost stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test10CheckoutedCartCannotBeModified stamp: 'DH 11/19/2019 19:43:24'!
PASSED!

!testRun: #PurchaseSystemTest #test11CheckoutedCartCannotBeListed stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test12CannotListPurchasesOfNonExistentClient stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test13CannotListPurchasesOfClientUsingWrongPassword stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test14ListingPurchasesOfClientShowsAllPurchases stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test15CannotListACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test16CannotModifyACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test17CannotCheckoutACartIf30MinutesPassedSinceLastUsed stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test18CartNotUsedFor30MinutesIsDeleted stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test19CannotAddBookThatDoesNotBelongToEditorial stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

!testRun: #PurchaseSystemTest #test20CannotAddBookWithQuantityLessThanOne stamp: 'DH 11/19/2019 19:43:25'!
PASSED!

----SNAPSHOT----(19 November 2019 19:43:42) CuisUniversity-3938.image priorSource: 16015377!

----QUIT----(19 November 2019 19:43:51) CuisUniversity-3938.image priorSource: 16044487!